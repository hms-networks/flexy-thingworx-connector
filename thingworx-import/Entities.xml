<?xml version="1.0" encoding="UTF-8" standalone="no"?><Entities build="b136" majorVersion="9" minorVersion="0" modelPersistenceProviderPackage="PostgresPersistenceProviderPackage" revision="2" schemaVersion="1102" universal="password"><StyleDefinitions/><Networks/><PersistenceProviderPackages/><Mashups/><ScriptFunctionLibraries/><Projects><Project artifactId="" dependsOn="{&quot;extensions&quot;:&quot;&quot;,&quot;projects&quot;:&quot;&quot;}" description="This project contains all things and services that are required by the Ewon Thingworx Connector." documentationContent="Version: 1.1&#10;&#10;Additional information and updated source code may be found online at https://github.com/hms-networks/flexy-thingworx-connector/" groupId="" homeMashup="" lastModifiedDate="2020-10-15T10:39:27.957-07:00" minPlatformVersion="" name="EwonThingworxConnector" packageVersion="1.0.0" projectName="EwonThingworxConnector" publishResult="" state="DRAFT" tags=""><Owner name="Administrator" type="User"/><avatar/><DesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></DesignTimePermissions><RunTimePermissions/><VisibilityPermissions><Visibility/></VisibilityPermissions><ConfigurationTableDefinitions/><ConfigurationTables/><ConfigurationChanges><ConfigurationChange changeAction="CREATE" changeReason="header : name : updated, description : updated, documentationContent : updated&#10;" timestamp="2020-10-08T08:22:51.334-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="header : documentationContent : updated&#10;" timestamp="2020-10-08T08:38:39.155-07:00" user="Administrator"/><ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2020-10-08T08:43:29.052-07:00" user="Administrator"/><ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2020-10-08T08:52:22.846-07:00" user="Administrator"/></ConfigurationChanges></Project></Projects><Users/><DirectoryServices/><Widgets/><MediaEntities/><Groups/><PersistenceProviders/><ModelTags/><LocalizationTables/><Dashboards/><StyleThemes/><DataShapes/><Things><Thing description="This is a generic value stream that can accept and store the datapoints for configured thing properties." documentationContent="" effectiveThingPackage="ValueStreamThing" enabled="true" homeMashup="StreamMashup" identifier="" inheritedValueStream="" lastModifiedDate="2020-10-15T10:39:27.957-07:00" name="GenericEwonDeviceValueStream" projectName="EwonThingworxConnector" published="false" tags="" thingTemplate="ValueStream" valueStream=""><Owner name="Administrator" type="User"/><avatar/><DesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></DesignTimePermissions><RunTimePermissions/><VisibilityPermissions><Visibility/></VisibilityPermissions><ConfigurationTableDefinitions/><ConfigurationTables><ConfigurationTable dataShapeName="" description="Data Thing Configuration" isMultiRow="false" name="DataThingSettings" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="Persistence Provider Name" name="persistenceProvider" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><persistenceProvider><![CDATA[ThingworxPersistenceProvider]]></persistenceProvider></Row></Rows></ConfigurationTable><ConfigurationTable dataShapeName="" description="Configurable options to tune Value Stream performance" isMultiRow="false" name="PersistenceProviderCustomSettings" ordinal="2"><DataShape><FieldDefinitions><FieldDefinition aspect.friendlyName="Persistence Provider Custom Settings Table" baseType="INFOTABLE" description="Persistence Provider Custom Config Table" name="customConfigTable" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><customConfigTable><infoTable><DataShape><FieldDefinitions/></DataShape><Rows/></infoTable></customConfigTable></Row></Rows></ConfigurationTable></ConfigurationTables><ThingShape><PropertyDefinitions/><ServiceDefinitions/><EventDefinitions/><ServiceMappings/><ServiceImplementations/><Subscriptions/></ThingShape><PropertyBindings/><RemotePropertyBindings/><RemoteServiceBindings/><RemoteEventBindings/><AlertConfigurations/><ImplementedShapes/><ThingProperties/><ConfigurationChanges><ConfigurationChange changeAction="CREATE" changeReason="header : projectName : updated, name : updated, description : updated&#10;" timestamp="2020-10-15T07:40:45.506-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="" timestamp="2020-10-15T10:39:27.957-07:00" user="Administrator"/></ConfigurationChanges></Thing><Thing description="The main service provider of the Ewon Thingworx Connector. This 'thing' provides the services required for receiving and processing data from the Ewon Talk2M cloud and the Ewon Thingworx Connector Java application for Flexy. The Ewon Thingworx Connector configuration can be modified by editing the properties of this 'thing'." documentationContent="" effectiveThingPackage="TimerThing" enabled="true" homeMashup="" identifier="" inheritedValueStream="" lastModifiedDate="2020-10-19T06:37:50.743-07:00" name="ConnectorHost" projectName="EwonThingworxConnector" published="false" tags="" thingTemplate="Timer" valueStream=""><Owner name="Administrator" type="User"/><avatar/><DesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></DesignTimePermissions><RunTimePermissions/><VisibilityPermissions><Visibility/></VisibilityPermissions><ConfigurationTableDefinitions/><ConfigurationTables><ConfigurationTable dataShapeName="" description="General Settings" isHidden="true" isMultiRow="false" name="Settings" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition aspect.defaultValue="true" baseType="BOOLEAN" description="Automatically enable timer on startup" name="enabled" ordinal="0"/><FieldDefinition baseType="USERNAME" description="User context in which to run event handlers" name="runAsUser" ordinal="0"/><FieldDefinition aspect.defaultValue="60000.0" baseType="NUMBER" description="Update rate" name="updateRate" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><enabled>true</enabled><runAsUser><![CDATA[Administrator]]></runAsUser><updateRate>30000.0</updateRate></Row></Rows></ConfigurationTable></ConfigurationTables><ThingShape><PropertyDefinitions><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="true" aspect.isPersistent="true" baseType="BOOLEAN" category="" description="" isLocalOnly="false" name="disableTalk2M" ordinal="10"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="-1" aspect.isPersistent="true" baseType="INTEGER" category="" description="" isLocalOnly="false" name="lastTransactionId" ordinal="16"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="DATETIME" category="" description="" isLocalOnly="false" name="lastUpdateTime" ordinal="16"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="30" aspect.isPersistent="true" aspect.units="seconds" baseType="INTEGER" category="" description="" isLocalOnly="false" name="scriptTimeoutSeconds" ordinal="12"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="talk2MAccount" ordinal="14"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="talk2MDeveloperID" ordinal="12"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="talk2MPassword" ordinal="13"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="talk2MToken" ordinal="9"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="talk2MUsername" ordinal="12"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="10" aspect.isPersistent="true" aspect.units="" baseType="INTEGER" category="" description="" isLocalOnly="false" name="updateTimeoutMinutes" ordinal="16"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="false" aspect.isPersistent="true" baseType="BOOLEAN" category="" description="When set to true, all newly created properties will use 'Always' for the DataChangeType." isLocalOnly="false" name="useDataChangeTypeAlways" ordinal="13"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="false" aspect.isPersistent="true" baseType="BOOLEAN" category="" description="True indicates that the tag name, up to the first hypen, will be appended to the thing name. This allows for a more refined organization of things and their properties." isLocalOnly="false" name="useHyphens" ordinal="17"/></PropertyDefinitions><ServiceDefinitions><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="InsertDataPoint"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="ewonName" ordinal="2"/><FieldDefinition aspect.isRequired="true" baseType="BOOLEAN" description="" name="isTalk2MDevice" ordinal="7"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="tagName" ordinal="1"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="tagQuality" ordinal="5"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="tagType" ordinal="6"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="tagValue" ordinal="3"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="timestamp" ordinal="4"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="true" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="MainExecution"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="true" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="ProcessTimeSinceUpdate"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="BOOLEAN" description="" name="hasUpdated" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="true" category="" description="Landing function that an ewon can connect to" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="TakeInfo"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="Tags" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="Grabs all historical data from the DataMailbox then cleans all of the recieved data from data mailbox" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="Talk2MSyncData"><ResultType baseType="JSON" description="returns usedTransactionId which is the most recent TransactionId actually processed and ready for deletion and nextTransactionId, the next transaction id to be called." name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.defaultValue="-1" baseType="INTEGER" description="" name="initialTransactionId" ordinal="1"/></ParameterDefinitions></ServiceDefinition></ServiceDefinitions><EventDefinitions/><ServiceMappings/><ServiceImplementations><ServiceImplementation description="" handlerName="Script" name="InsertDataPoint"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Inserts a datapoint to its respective thing property
 *
 * @author HMS Networks, MU Americas Solution Center
 */
// wrapper function for early returns
function run() {
    /* 
     * Get thing name (if use hypens enabled, 
     * include tag name up to first hypen)
     */
    var thingName = ewonName;
    var propName = tagName;
    if (me.useHyphens === true && tagName.includes("-")) {
        thingName = ewonName + "-" + tagName.substring(0, tagName.indexOf("-"));
        propName = tagName.substring(tagName.indexOf("-") + 1);
    }

    // Log information
    logger.info("Inserting datapoint for property [" + propName + "] on Thing [" + thingName + "] with value [" + tagValue + "], quality [" + tagQuality + "], type [" + tagType + "] and timestamp [" + timestamp + "].");

    // Attempt to access thing, if fails, need to create thing
    try {
        // Test read thing name
        var thingNameTest;
        thingNameTest = Things[thingName].name;
    } catch (err) {
        // Need to create new thing
        var params;
        if (isTalk2MDevice) {
            params = {
                name: thingName /* STRING */ ,
                description: "Created by EwonThingworxConnector" /* STRING */ ,
                thingTemplateName: "GenericEwonDeviceTalk2M" /* THINGTEMPLATENAME */ ,
                project: "EwonThingworxConnector",
                tags: undefined /* TAGS */ ,
            };
        } else {
            params = {
                name: thingName /* STRING */ ,
                description: "Created by EwonThingworxConnector" /* STRING */ ,
                thingTemplateName: "GenericEwonDeviceDirect" /* THINGTEMPLATENAME */ ,
                project: "EwonThingworxConnector",
                tags: undefined /* TAGS */ ,
            };
        }
        Resources["EntityServices"].CreateThing(params);
        Things[thingName].EnableThing();
        Things[thingName].RestartThing();
    }

    // Check if property exists/needs to be created
    var needToCreateProperty = false;
    try {
        var propertyLogging = Things[thingName].GetPropertyLogging({
            propertyName: propName
        });
    } catch (err) {
        needToCreateProperty = true;
    }

    // Create property if necessary
    if (needToCreateProperty) {
        // Get property data change type for creation
        var propDataChangeType = "VALUE";
        if (me.useDataChangeTypeAlways) {
            propDataChangeType = "ALWAYS";
        }
        
        Things[thingName].AddPropertyDefinition({
            readOnly: false,
            remote: false,
            type: tagType,
            logged: true,
            name: propName,
            persistent: true,
            dataChangeType: propDataChangeType
        });
        Things[thingName].RestartThing();
    }

    // Convert tag value to proper type
    var tagValFinal = tagValue;
    if (tagType === "INTEGER") {
        tagValFinal = parseInt(tagValue);
    }

    // Update property value
    var createITParams = {
        infoTableName: "InfoTable",
        dataShapeName: "NamedVTQ"
    };
    var properties = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(createITParams);
    var row = new Object();
    row.name = propName;
    row.value = tagValFinal;
    row.quality = tagQuality;
    row.time = new Date(timestamp);
    properties.AddRow(row);
    Things[thingName].UpdatePropertyValues({
        values: properties
    });



}
if (tagName && ewonName && tagValue && timestamp) {
    run();
} else {
    logger.error(
        'One or more parameters for InsertDataPoint were undefined or null.'
    );
    logger.debug(
        'tagName: ' +
        tagName +
        ' ewonName: ' +
        ewonName +
        'tagValue: ' +
        tagValue +
        'timestamp: ' +
        timestamp
    );
}]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="MainExecution"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Main Execution loop of the connector, gets historical data from Talk2M
 *
 * @author HMS Networks, MU Americas Solution Center
 */
var startTimeMillis = Date.now();

/*
 * Current configured script timeout length.
 * Exceeding this will throw errors.
 */
var timeoutLengthMillis = me.scriptTimeoutSeconds * 1000;

// The previous transaction ID
var prevTransactionId = me.lastTransactionId;

// the longest time that Talk2MSyncData has taken to Execute
var longestSyncDataExecutionMillis = 0;

// decreasing this buffer will cause this service to ride closer to the edge of a timeout error
var syncDataIncreaseBufferMillis = 1000;
var getResult;

var timeElapsedMillis = Date.now() - startTimeMillis;

/*
 * Once timeElapsedMillis is greater than maxExecutionTimeMillis, no more Talk2MSyncData calls will be made.
 * This should be enough time that even if a Talk2MSyncData execution was started 1 millisecond before maxExecutionTimeMillis,
 * a timeout error would still not occur.
 */
var maxExecutionTimeMillis =
    timeoutLengthMillis -
    (longestSyncDataExecutionMillis + syncDataIncreaseBufferMillis);

/*
 * This loop calls Talk2MSyncData as many times as it can within maxExecutionTimeMillis.
 */
while (timeElapsedMillis < maxExecutionTimeMillis) {
    // clocks how long each Talk2MSyncData call takes
    var syncDataStartExecutionMillis = Date.now();
    getResult = me.Talk2MSyncData();
    var syncDataEndExecutionMillis = Date.now();

    // only updates longestSyncDataExecutionMillis when this is the longest Execution
    var syncDataExecutionMillis = syncDataEndExecutionMillis - syncDataStartExecutionMillis;
    if (
        syncDataExecutionMillis >
        longestSyncDataExecutionMillis
    ) {
        longestSyncDataExecutionMillis =
            syncDataExecutionMillis;
    }

    if (getResult.done) {
        break;
    }

    // updating timing variables for while loop
    maxExecutionTimeMillis =
        timeoutLengthMillis -
        (longestSyncDataExecutionMillis + syncDataIncreaseBufferMillis);
    timeElapsedMillis = Date.now() - startTimeMillis;
}
if (!getResult.done) {
    logger.warn(
        'Syncdata was not able to execute within the set timeout length. To resolve this, ' +
        'increase scriptTimeout in platform-settings.json, or run MainExecution more often.'
    );
}
// If transaction ID has not increased, no data updates performed
if (prevTransactionId == me.lastTransactionId) {
    // there has been no new update of information
    me.ProcessTimeSinceUpdate({
        hasUpdated: false
    });
} else {
    // There was new information, most recent update time is now
    me.ProcessTimeSinceUpdate({
        hasUpdated: true
    });
}]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="ProcessTimeSinceUpdate"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Keeps track of the time since the last data update was received. If the time
 * is long enough, then an error is sent.
 *
 * @author HMS Networks, MU Americas Solution Center
 */
const MILLISECONDS_IN_MINUTES = 60000;
if (hasUpdated) {
  // There was an update, so the last update time is changed to now
  me.lastUpdateTime = Date.now();
} else {
  const timeSinceLastUpdate = Date.now() - me.lastUpdateTime;
  const maximumAllowedTimeSinceLastUpdate =
    MILLISECONDS_IN_MINUTES * me.updateTimeoutMinutes;
  if (timeSinceLastUpdate > maximumAllowedTimeSinceLastUpdate) {
    logger.error(
      'A data update has not been received since ' + me.lastUpdateTime
    );
  }
}
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="TakeInfo"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[const DATA_QUALITY_BAD = 0;
const DATA_QUALITY_UNKNOWN = 1;
const DATA_QUALITY_GOOD = 3;
const DATA_TYPE_BOOLEAN = 0;
const DATA_TYPE_FLOAT = 1;
const DATA_TYPE_INTEGER = 2;
const DATA_TYPE_DWORD = 3;
const DATA_TYPE_STRING = 4;

/*
 * Alternative method that avoids using DataMailbox to send data to Thingworx.
 * Uses a Ewon Thingworx connector which runs on a Flexy.
 * More information can be found in the README.md file.
 *
 * @author HMS Networks, MU Americas Solution Center
 */
// wrapper function to enable early returns
function run() {
    var parsedTags = JSON.parse(Tags);
    var ewonName = parsedTags.info['ewon-name'];

    // tagArray holds the datapoints array which contains all logged data
    var tagArray = parsedTags.datapoints;

    var i;
    for (i = 0; i < tagArray.length; i += 1) {
        var tag = tagArray[i];
        // Get tag data quality
        var tagQuality = "UNKNOWN";
        if ("quality" in tag) {
            if (tag.quality === DATA_QUALITY_BAD) {
                tagQuality = "BAD";
            } else if (tag.quality === DATA_QUALITY_GOOD) {
                tagQuality = "GOOD";
            }
        } else {
            logger.warn("The connected Ewon device is not sending tag quality information. Check that the Ewon Thingworx Connector has been updated on the Ewon device!");
        }

        // Get tag data type
        var tagType;
        if ("type" in tag) {
            if (tag.type === DATA_TYPE_BOOLEAN) {
                // Ewon Boolean tag converts to Thingworx Boolean
                tagType = "BOOLEAN";
            } else if (tag.type === DATA_TYPE_FLOAT) {
                // Ewon Float tag converts to Thingworx Number
                tagType = "NUMBER";
            } else if (tag.type === DATA_TYPE_INTEGER) {
                // Ewon Integer tag converts to Thingworx Integer
                tagType = "INTEGER";
            } else if (tag.type === DATA_TYPE_DWORD) {
                // Ewon DWORD tag converts to Thingworx Number
                tagType = "NUMBER";
            } else if (tag.type === DATA_TYPE_STRING) {
                // Ewon String tag converts to Thingworx String
                tagType = "STRING";
            } else {
                // Unknown tag type, default to Thingworx Number
                logger.warn("Unknown tag type (" + tag.type + ") for tag: " + tag.name);
                tagType = "NUMBER";
            }
        } else {
            logger.warn("The connected Ewon device is not sending tag type information. Check that the Ewon Thingworx Connector has been updated on the Ewon device!");
        }

        // Add datapoint to Thing
        me.InsertDataPoint({
            tagName: tag.name /* STRING */ ,
            ewonName: ewonName /* STRING */ ,
            tagValue: tag.value /* STRING */ ,
            timestamp: tag.timestamp /* STRING */ ,
            tagQuality: tagQuality /* STRING */ ,
            tagType: tagType /* STRING */ ,
            isTalk2MDevice: false /* BOOLEAN */
        });
    }
}
run();

// Registers that an update has been received
me.ProcessTimeSinceUpdate({
    hasUpdated: true
});]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="Talk2MSyncData"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[const TW_DATA_TYPE_BOOLEAN = "BOOLEAN";
const TW_DATA_TYPE_INTEGER = "INTEGER";
const TW_DATA_TYPE_NUMBER = "NUMBER";
const TW_DATA_QUALITY_GOOD = "GOOD";
const TW_DATA_QUALITY_BAD = "BAD";
const TW_DATA_QUALITY_UNKNOWN = "UNKNOWN";
const T2M_DATA_QUALITY_BAD = "bad";
const T2M_DATA_QUALITY_UNKNOWN = "unknown";

/*
 * Talk2MSyncData gets and inserts all logged data from DataMailbox.
 *
 * @author HMS Networks, MU Americas Solution Center
 */
function parseEwon(ewon) {
    // Gets Ewon name without leading/trailing spaces
    var ewonName = ewon.name.trim();

    // Loop through each tag listed
    ewon.tags.forEach((tag) => {
        var i;
        if (tag.history) {
            // Process each historical data point
            tag.history.forEach((datapoint) => {

                // Get tag data quality (Talk2M only returns if it is not 'good')
                var tagQuality = TW_DATA_QUALITY_GOOD;
                if (datapoint.quality === T2M_DATA_QUALITY_BAD) {
                    tagQuality = TW_DATA_QUALITY_BAD;
                } else if (datapoint.quality === T2M_DATA_QUALITY_UNKNOWN) {
                    tagQuality = TW_DATA_QUALITY_UNKNOWN;
                }

                // Get tag data type
                var tagType;
                if (datapoint.dataType === "Int") {
                    tagType = TW_DATA_TYPE_INTEGER;
                } else if (datapoint.dataType === "Bool") {
                    tagType = TW_DATA_TYPE_BOOLEAN;
                } else if (datapoint.dataType === "Float") {
                    tagType = TW_DATA_TYPE_NUMBER;
                } else if (datapoint.dataType === "UInt") {
                    tagType = TW_DATA_TYPE_NUMBER;
                } else {
                    logger.warn("Unknown data type (" + datapoint.dataType + ") for tag: " + tag.name);
                    tagType = TW_DATA_TYPE_NUMBER;
                }

                // Add datapoint to Thing
                me.InsertDataPoint({
                    tagName: tag.name /* STRING */ ,
                    ewonName: ewonName /* STRING */ ,
                    tagValue: datapoint.value /* STRING */ ,
                    timestamp: datapoint.date /* STRING */ ,
                    tagQuality: tagQuality /* STRING */ ,
                    tagType: tagType /* STRING */ ,
                    isTalk2MDevice: true /* BOOLEAN */
                });
            });
        }
    });
}
// wrapper function to enable early returns
function run() {
    var url = 'https://data.talk2m.com/syncdata';

    var talk2MParameters =
        't2mdevid=' +
        me.talk2MDeveloperID +
        '&t2mtoken=' +
        me.talk2MToken;

    // Create transaction if no ID previously stored
    if (me.lastTransactionId === -1) {
        talk2MParameters = talk2MParameters + '&createTransaction=true';
    } else {
        talk2MParameters = talk2MParameters + '&createTransaction=true&lastTransactionId=' + me.lastTransactionId;
    }

    var headerJSON = {
        'Content-Type': 'application/x-www-form-urlencoded',
    };
    var params = {
        headers: headerJSON /* JSON */ ,
        url: encodeURI(url) /* STRING */ ,
        content: talk2MParameters /* JSON */ ,
    };

    /*
     * sends API request to DataMailbox
     * response: JSON as a string
     */
    var response = Resources['ContentLoaderFunctions'].PostText(params);
    /*
     * There is some unnecessary information about the post call appended to the end of the response.
     * Parsing the response from the start to the last bracket avoids any errors.
     */
    response = JSON.parse(response.substring(0, response.lastIndexOf('}') + 1));
    if (!response['success']) {
        logger.error(
            'Error calling DataMailbox API in Talk2MSyncData. Error: ' +
            response['message']
        );
        return;
    }
    if (response.transactionId) {
        me.lastTransactionId = parseInt(response.transactionId);
    }
    var ewons = response.ewons;
    ewons.forEach(parseEwon);
    // check to see if more data is available, if so, store that value to be returned later
    var done = false;
    if (response.moreDataAvailable === undefined) {
        done = true;
    }

    return {
        done: done
    };
}
// this acts as a return statement
var result = run();]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></ServiceImplementations><Subscriptions><Subscription description="" enabled="true" eventName="Timer" name="runConnector" source="" sourceProperty="" sourceType="Thing"><ServiceImplementation description="" handlerName="Script" name="runConnector"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[if (!me.disableTalk2M) {
    me.MainExecution();
}]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription></Subscriptions></ThingShape><PropertyBindings/><RemotePropertyBindings/><RemoteServiceBindings/><RemoteEventBindings/><AlertConfigurations><AlertDefinitions name="disableTalk2M"/><AlertDefinitions name="lastTransactionId"/><AlertDefinitions name="lastUpdateTime"/><AlertDefinitions name="scriptTimeoutSeconds"/><AlertDefinitions name="talk2MAccount"/><AlertDefinitions name="talk2MDeveloperID"/><AlertDefinitions name="talk2MPassword"/><AlertDefinitions name="talk2MToken"/><AlertDefinitions name="talk2MUsername"/><AlertDefinitions name="updateTimeoutMinutes"/><AlertDefinitions name="useDataChangeTypeAlways"/><AlertDefinitions name="useHyphens"/></AlertConfigurations><ImplementedShapes/><ThingProperties><useHyphens><Value>false</Value><Timestamp>2020-10-19T06:35:55.942-07:00</Timestamp><Quality>GOOD</Quality></useHyphens><talk2MToken><Value/><Timestamp>2020-10-19T06:35:39.780-07:00</Timestamp><Quality>GOOD</Quality></talk2MToken><talk2MUsername><Value/><Timestamp>2020-10-19T06:35:43.515-07:00</Timestamp><Quality>GOOD</Quality></talk2MUsername><lastTransactionId><Value>-1</Value><Timestamp>2020-10-19T06:35:10.068-07:00</Timestamp><Quality>GOOD</Quality></lastTransactionId><talk2MAccount><Value/><Timestamp>2020-10-19T06:35:26.913-07:00</Timestamp><Quality>GOOD</Quality></talk2MAccount><updateTimeoutMinutes><Value>10</Value><Timestamp>2020-10-02T13:13:26.007-07:00</Timestamp><Quality>GOOD</Quality></updateTimeoutMinutes><talk2MDeveloperID><Value/><Timestamp>2020-10-19T06:35:31.075-07:00</Timestamp><Quality>GOOD</Quality></talk2MDeveloperID><useDataChangeTypeAlways><Value>false</Value><Timestamp>2020-10-19T06:35:52.437-07:00</Timestamp><Quality>GOOD</Quality></useDataChangeTypeAlways><disableTalk2M><Value>true</Value><Timestamp>2020-10-19T06:35:05.708-07:00</Timestamp><Quality>GOOD</Quality></disableTalk2M><scriptTimeoutSeconds><Value>30</Value><Timestamp>2020-10-08T08:30:06.869-07:00</Timestamp><Quality>GOOD</Quality></scriptTimeoutSeconds><talk2MPassword><Value/><Timestamp>2020-10-19T06:35:35.264-07:00</Timestamp><Quality>GOOD</Quality></talk2MPassword><lastUpdateTime><Value>2020-10-19T06:37:52.276-07:00</Value><Timestamp>2020-10-19T06:37:52.276-07:00</Timestamp><Quality>GOOD</Quality></lastUpdateTime></ThingProperties><ConfigurationChanges><ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2020-10-08T08:52:22.846-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : MainExecution : service updated&#10;" timestamp="2020-10-12T05:12:06.863-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertDataPoint : service updated&#10;" timestamp="2020-10-12T06:50:48.151-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : Talk2MSyncData : service updated&#10;" timestamp="2020-10-13T06:01:33.304-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertDataPoint : service updated&#10;" timestamp="2020-10-15T10:33:05.455-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertDataPoint : service updated&#10;" timestamp="2020-10-15T10:37:54.257-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertDataPoint : service updated&#10;" timestamp="2020-10-15T10:38:08.781-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertDataPoint : service updated&#10;" timestamp="2020-10-15T10:39:14.405-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="" timestamp="2020-10-15T10:39:27.957-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="properties : useDataChangeTypeAlways : added&#10;" timestamp="2020-10-19T06:27:05.218-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="properties : useDataChangeTypeAlways : updated&#10;services : InsertDataPoint : service updated&#10;" timestamp="2020-10-19T06:32:47.053-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertDataPoint : service updated&#10;" timestamp="2020-10-19T06:33:54.393-07:00" user="Administrator"/></ConfigurationChanges></Thing></Things><Logs/><Authenticators/><ThingPackages/><NotificationDefinitions/><ApplicationKeys/><StateDefinitions/><ThingTemplates><ThingTemplate baseThingTemplate="GenericThing" description="The base thing template which provides common properties for all Ewon devices that use the GenericEwonDeviceTalk2M and GenericEwonDeviceDirect thing templates." documentationContent="" effectiveThingPackage="ConfiguredThing" homeMashup="" inheritedValueStream="" lastModifiedDate="2020-10-15T10:39:27.942-07:00" name="GenericEwonDevice" projectName="EwonThingworxConnector" tags="" thingPackage="" valueStream="GenericEwonDeviceValueStream"><Owner name="Administrator" type="User"/><avatar><![CDATA[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]]></avatar><DesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></DesignTimePermissions><RunTimePermissions/><VisibilityPermissions><Visibility/></VisibilityPermissions><ConfigurationTableDefinitions/><ConfigurationTables/><PropertyBindings><PropertyBinding aspect.source="" aspect.startType="null" aspect.tagAddress="" name="talk2MAccount" sourceName="talk2MAccount" sourceThingName="ConnectorHost"/><PropertyBinding aspect.source="" aspect.startType="null" aspect.tagAddress="" name="talk2MDeveloperID" sourceName="talk2MDeveloperID" sourceThingName="ConnectorHost"/><PropertyBinding aspect.source="" aspect.startType="null" aspect.tagAddress="" name="talk2MPassword" sourceName="talk2MPassword" sourceThingName="ConnectorHost"/><PropertyBinding aspect.source="" aspect.startType="null" aspect.tagAddress="" name="talk2MUsername" sourceName="talk2MUsername" sourceThingName="ConnectorHost"/></PropertyBindings><RemotePropertyBindings/><RemoteServiceBindings/><RemoteEventBindings/><AlertConfigurations><AlertDefinitions name="ewonDevicePassword"/><AlertDefinitions name="ewonDeviceUsername"/><AlertDefinitions name="talk2MAccount"/><AlertDefinitions name="talk2MDeveloperID"/><AlertDefinitions name="talk2MPassword"/><AlertDefinitions name="talk2MUsername"/></AlertConfigurations><ThingShape><PropertyDefinitions><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="adm" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="ewonDevicePassword" ordinal="6"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="adm" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="ewonDeviceUsername" ordinal="5"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="talk2MAccount" ordinal="2"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="talk2MDeveloperID" ordinal="7"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="talk2MPassword" ordinal="4"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="talk2MUsername" ordinal="3"/></PropertyDefinitions><ServiceDefinitions/><EventDefinitions/><ServiceMappings/><ServiceImplementations/><Subscriptions/></ThingShape><ImplementedShapes/><SharedConfigurationTables/><InstanceDesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></InstanceDesignTimePermissions><InstanceRunTimePermissions/><InstanceVisibilityPermissions><Visibility/></InstanceVisibilityPermissions><ConfigurationChanges><ConfigurationChange changeAction="CREATE" changeReason="header : name : updated, avatar : updated&#10;" timestamp="2020-10-02T12:25:08.754-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="header : description : updated&#10;" timestamp="2020-10-02T12:26:27.956-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="header : projectName : updated&#10;" timestamp="2020-10-02T12:26:59.936-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="properties : talk2MAccount : added&#10;" timestamp="2020-10-05T11:17:58.659-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="properties : talk2MUsername : added, talk2MAccount : updated, talk2MPassword : added&#10;" timestamp="2020-10-05T11:19:14.319-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="properties : ewonDeviceUsername : added, ewonDevicePassword : added&#10;" timestamp="2020-10-05T11:21:27.373-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : UpdateEwonTagValue : service added&#10;" timestamp="2020-10-05T11:29:16.198-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : UpdateEwonTagValue : input parameter tagName added, inputs updated, input parameter tagValue added, inputs updated&#10;" timestamp="2020-10-05T11:33:47.120-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="properties : talk2MDeveloperID : added&#10;" timestamp="2020-10-05T11:37:18.647-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : SendEwonOffline : service added&#10;" timestamp="2020-10-05T11:40:13.217-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : WakeEwonDevice : service added&#10;" timestamp="2020-10-05T11:41:10.938-07:00" user="Administrator"/><ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2020-10-07T08:11:29.771-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : SendEwonOffline : service deleted&#10;UpdateEwonTagValue : service deleted&#10;WakeEwonDevice : service deleted&#10;" timestamp="2020-10-08T07:35:24.416-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="header : description : updated&#10;" timestamp="2020-10-08T07:44:22.789-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="properties : ewonDeviceUsername : updated, ewonDevicePassword : updated&#10;" timestamp="2020-10-08T07:51:43.315-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="header : description : updated&#10;" timestamp="2020-10-08T08:15:17.287-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="header : description : updated&#10;" timestamp="2020-10-08T08:17:00.119-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="SetProjectName : []" timestamp="2020-10-08T08:23:34.868-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="SetProjectName : [EwonThingworxConnector]" timestamp="2020-10-08T08:24:13.004-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="SetProjectName : []" timestamp="2020-10-08T08:25:11.736-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="SetProjectName : [EwonThingworxConnector]" timestamp="2020-10-08T08:25:11.752-07:00" user="Administrator"/><ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2020-10-08T08:43:29.037-07:00" user="Administrator"/><ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2020-10-08T08:52:22.830-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="properties : talk2MAccount : updated, talk2MDeveloperID : updated, talk2MPassword : updated, talk2MUsername : updated&#10;" timestamp="2020-10-12T06:55:04.910-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="" timestamp="2020-10-15T07:40:56.102-07:00" user="Administrator"/></ConfigurationChanges></ThingTemplate><ThingTemplate baseThingTemplate="GenericEwonDevice" description="The base thing template which provides properties and services for Ewon devices that have been connected to Thingworx using the Ewon Thingworx Connector Talk2M data path." documentationContent="" effectiveThingPackage="ConfiguredThing" homeMashup="" inheritedValueStream="GenericEwonDeviceValueStream" lastModifiedDate="2020-10-15T10:39:27.926-07:00" name="GenericEwonDeviceTalk2M" projectName="EwonThingworxConnector" tags="" thingPackage="" valueStream=""><Owner name="Administrator" type="User"/><avatar><![CDATA[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]]></avatar><DesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></DesignTimePermissions><RunTimePermissions/><VisibilityPermissions><Visibility/></VisibilityPermissions><ConfigurationTableDefinitions/><ConfigurationTables/><PropertyBindings><PropertyBinding aspect.source="" aspect.startType="null" aspect.tagAddress="" name="talk2MAccount" sourceName="talk2MAccount" sourceThingName="ConnectorHost"/><PropertyBinding aspect.source="" aspect.tagAddress="" name="talk2MDeveloperID" sourceName="talk2MDeveloperID" sourceThingName="ConnectorHost"/><PropertyBinding aspect.source="" aspect.tagAddress="" name="talk2MPassword" sourceName="talk2MPassword" sourceThingName="ConnectorHost"/><PropertyBinding aspect.source="" aspect.tagAddress="" name="talk2MUsername" sourceName="talk2MUsername" sourceThingName="ConnectorHost"/></PropertyBindings><RemotePropertyBindings/><RemoteServiceBindings/><RemoteEventBindings/><AlertConfigurations/><ThingShape><PropertyDefinitions/><ServiceDefinitions><ServiceDefinition aspect.isAsync="false" category="Talk2M" description="Sends the current Ewon device to offline mode using Talk2M" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="SendEwonOffline"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="Talk2M" description="This service allows you to set the value of specified tag on the current Ewon device using M2Web." isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="UpdateEwonTagValue"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="STRING" description="The name of the tag which is being updated" name="tagName" ordinal="1"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="The value of the tag which is being updated" name="tagValue" ordinal="2"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="Talk2M" description="Wakes the current Ewon device via Talk2M." isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="WakeEwonDevice"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition></ServiceDefinitions><EventDefinitions/><ServiceMappings/><ServiceImplementations><ServiceImplementation description="" handlerName="Script" name="SendEwonOffline"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Sets the current Ewon device to offline mode via Talk2M.
 *
 * @author HMS Networks, MU Americas Solution Center
 */
// simple wrapper function to facilitate early returns
function run() {
  var host = 'https://m2web.talk2m.com/t2mapi/';
  var command = 'getewon?name=' + me.name;
  var credentials =
    '&t2maccount=' +
    me.talk2MAccount +
    '&t2musername=' +
    me.talk2MUsername +
    '&t2mpassword=' +
    me.talk2MPassword +
    '&t2mdeveloperid=' +
    me.talk2MDeveloperID;

  var params = {
    url: encodeURI(host + command + credentials) /* STRING */,
  };

  // sends API request to DataMailbox
  var result = Resources['ContentLoaderFunctions'].GetJSON(params);
  if (!result.success) {
    logger.error(
      'Error calling DataMailbox API in SendEwonOffline. Error: ' +
        result['message']
    );
    return;
  }
  var ewon = result.ewon;
  var status = ewon.status;
    command = 'sendoffline?name=' + me.name;

  params = {
    url: encodeURI(host + command + credentials) /* STRING */,
  };

  // sends the api request to DataMailBox
  result = Resources['ContentLoaderFunctions'].GetJSON(params);
  logger.warn(JSON.stringify(result));
  if (!result.success) {
    logger.error(
      'Error calling DataMailbox API in SendEwonOffline. Error: ' +
        result['message']
    );
    return;
  }
}
run();
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="UpdateEwonTagValue"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[const T2M_SUCCESS_MESSAGE = 'Success Message';
const INDEXOF_NOT_FOUND = -1;

/*
 * Updates a particular tag on the current Ewon device to a new value.
 *
 * @author HMS Networks, MU Americas Solution Center
 */
// wrapper function for early returns
function run() {
  // url construction
  var host = 'https://m2web.talk2m.com/t2mapi/get/' + me.name + '/rcgi.bin/';
  var command = 'UpdateTagForm';
  var tagValues = '?TagName1=' + tagName + '&TagValue1=' + tagValue;
  var ewonCredentials =
    '&t2mdeviceusername=' + me.ewonDeviceUsername + '&t2mdevicepassword=' + me.ewonDevicePassword;
  var credentials =
    '&t2maccount=' +
    me.talk2MAccount +
    '&t2musername=' +
    me.talk2MUsername +
    '&t2mpassword=' +
    me.talk2MPassword +
    '&t2mdeveloperid=' +
    me.talk2MDeveloperID;
  var completeURL = encodeURI(
    host + command + tagValues + credentials + ewonCredentials
  );
  var params = {
    url: completeURL /* STRING */,
  };

  /*
   * Uses getText instead of getJSON because this API request sometimes returns an HTML file.
   * Failures can be JSON or HTML. Success is always HTML. JSON is always failure.
   */
  var result = Resources['ContentLoaderFunctions'].GetText(params);
  try {
    result = JSON.parse(result);
    // if the return message is JSON then something went wrong
    logger.error(
      'Error calling DataMailbox API in UpdateEwonTagValue. Error: ' +
        result['message']
    );
    return;
  } catch (err) {}
  // Searching for "Success Message" to confirm a successful write
  if (result.indexOf(T2M_SUCCESS_MESSAGE) === INDEXOF_NOT_FOUND) {
    // The change failed, and returned HTML
    logger.error('Write failed in UpdateEwonTagValue: ' + result);
    return;
  }
  /*
   * Now the function reads back the new value to double check.
   * This command returns all instantaneous tag values.
   */
  command = 'ParamForm?AST_Param=$dtIV$ftT';
  completeURL = encodeURI(host + command + credentials + ewonCredentials);
  params = {
    url: completeURL /* STRING */,
  };
  // Returns a body with tag values and information in the following format:
  /*
    "TagId";"TagName";"Value";"AlStatus";"AlType";"Quality"
    2;"DEMOSTOP";0;0;0;65472
    3;"DEMOSCENARIO";2;0;0;65472
    4;"DEMOINUSE";1;0;0;65472
    5;"LiftStation-A01-FLOW";8770;0;0;65472
    6;"LiftStation-A01-PWR";1;0;0;65472
    7;"LiftStation-B01-FLOW";9160;0;0;65472
    8;"LiftStation-B01-PWR";1;0;0;65472
    */
  result = Resources['ContentLoaderFunctions'].GetText(params);
  var start = result.indexOf('"' + tagName + '"');
  /*
   * start takes us to the index of the tagName occurrence.
   * The offset of 3 accounts for the two " and the one ; before the tag value.
   * tagName.length takes the pointer to the end of the tagName.
   * start + 3 + tagName.length() will point to the first character of value.
   * tagValue.length() will then grab the entire tagValue.
   */
  const tagNameOffset = 3;
  newValue = result.substring(
    start + tagNameOffset + tagName.length,
    start + tagNameOffset + tagName.length + tagValue.length
  );
  if (tagValue == newValue) {
    logger.debug('The value of ' + tagName + ' changed to ' + tagValue + '.');
  } else {
    logger.error(
      'Failed to change the value of ' + tagName + ' to ' + tagValue + '.'
    );
    logger.debug('newValue: ' + tagValue + ', onWriteBack: ' + newValue);
  }
}
run();
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="WakeEwonDevice"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Wakes up the current Ewon device and sets it to online mode via Talk2M.
 *
 * @author HMS Networks, MU Americas Solution Center
 */
// simple wrapper function to facilitate early returns
function run() {
  var host = 'https://m2web.talk2m.com/t2mapi/';
  var command = 'getewon?name=' + me.name;
  var credentials =
    '&t2maccount=' +
    me.talk2MAccount +
    '&t2musername=' +
    me.talk2MUsername +
    '&t2mpassword=' +
    me.talk2MPassword +
    '&t2mdeveloperid=' +
    me.talk2MDeveloperID;

  var params = {
    url: encodeURI(host + command + credentials) /* STRING */,
  };

  // sends API request to DataMailbox
  var result = Resources['ContentLoaderFunctions'].GetJSON(params);
  if (!result.success) {
    logger.error(
      'Error calling DataMailbox API in WakeEwonDevice. Error: ' +
        result['message']
    );
    return;
  }
  var ewon = result.ewon;
  var status = ewon.status;
    command = 'wakeup?name=' + me.name;

  params = {
    url: encodeURI(host + command + credentials) /* STRING */,
  };

  // sends the api request to DataMailBox
  result = Resources['ContentLoaderFunctions'].GetJSON(params);
  logger.warn(JSON.stringify(result));
  if (!result.success) {
    logger.error(
      'Error calling DataMailbox API in WakeEwonDevice. Error: ' +
        result['message']
    );
    return;
  }
}
run();
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></ServiceImplementations><Subscriptions/></ThingShape><ImplementedShapes/><SharedConfigurationTables/><InstanceDesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></InstanceDesignTimePermissions><InstanceRunTimePermissions/><InstanceVisibilityPermissions><Visibility/></InstanceVisibilityPermissions><ConfigurationChanges><ConfigurationChange changeAction="CREATE" changeReason="header : name : updated, description : updated&#10;" timestamp="2020-10-08T07:34:02.149-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : SendEwonOffline : service updated&#10;" timestamp="2020-10-08T07:40:53.581-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : SendEwonOffline : service updated&#10;" timestamp="2020-10-08T07:41:34.033-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : WakeEwonDevice : service updated&#10;" timestamp="2020-10-08T07:42:23.074-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="header : description : updated&#10;" timestamp="2020-10-08T08:17:58.172-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="SetProjectName : []" timestamp="2020-10-08T08:23:34.868-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="SetProjectName : [EwonThingworxConnector]" timestamp="2020-10-08T08:24:13.004-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="SetProjectName : []" timestamp="2020-10-08T08:25:11.736-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="SetProjectName : [EwonThingworxConnector]" timestamp="2020-10-08T08:25:11.752-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : SendEwonOffline : service updated&#10;" timestamp="2020-10-08T08:35:17.087-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : SendEwonOffline : service updated&#10;" timestamp="2020-10-08T08:35:24.697-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : UpdateEwonTagValue : service updated&#10;" timestamp="2020-10-08T08:35:30.672-07:00" user="Administrator"/><ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2020-10-08T08:43:29.037-07:00" user="Administrator"/><ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2020-10-08T08:52:22.830-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : SendEwonOffline : service updated&#10;" timestamp="2020-10-12T05:14:19.410-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : SendEwonOffline : service updated&#10;" timestamp="2020-10-12T05:14:39.382-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : UpdateEwonTagValue : service updated&#10;" timestamp="2020-10-12T05:15:34.968-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : WakeEwonDevice : service updated&#10;" timestamp="2020-10-12T05:16:01.092-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : UpdateEwonTagValue : service updated&#10;" timestamp="2020-10-13T06:04:30.450-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : UpdateEwonTagValue : service updated&#10;" timestamp="2020-10-13T06:04:39.110-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : UpdateEwonTagValue : service updated&#10;" timestamp="2020-10-13T06:05:29.292-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : UpdateEwonTagValue : service updated&#10;" timestamp="2020-10-13T06:13:36.899-07:00" user="Administrator"/></ConfigurationChanges></ThingTemplate><ThingTemplate baseThingTemplate="GenericEwonDevice" description="The base thing template which provides properties and services for Ewon devices that have been connected to Thingworx using the Ewon Thingworx Connector direct data path." documentationContent="" effectiveThingPackage="ConfiguredThing" homeMashup="" inheritedValueStream="GenericEwonDeviceValueStream" lastModifiedDate="2020-10-15T10:39:27.942-07:00" name="GenericEwonDeviceDirect" projectName="EwonThingworxConnector" tags="" thingPackage="" valueStream=""><Owner name="Administrator" type="User"/><avatar><![CDATA[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]]></avatar><DesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></DesignTimePermissions><RunTimePermissions/><VisibilityPermissions><Visibility/></VisibilityPermissions><ConfigurationTableDefinitions/><ConfigurationTables/><PropertyBindings><PropertyBinding aspect.source="" aspect.startType="null" aspect.tagAddress="" name="talk2MAccount" sourceName="talk2MAccount" sourceThingName="ConnectorHost"/><PropertyBinding aspect.source="" aspect.tagAddress="" name="talk2MDeveloperID" sourceName="talk2MDeveloperID" sourceThingName="ConnectorHost"/><PropertyBinding aspect.source="" aspect.tagAddress="" name="talk2MPassword" sourceName="talk2MPassword" sourceThingName="ConnectorHost"/><PropertyBinding aspect.source="" aspect.tagAddress="" name="talk2MUsername" sourceName="talk2MUsername" sourceThingName="ConnectorHost"/></PropertyBindings><RemotePropertyBindings/><RemoteServiceBindings/><RemoteEventBindings/><AlertConfigurations><AlertDefinitions name="talk2MDeviceName"/></AlertConfigurations><ThingShape><PropertyDefinitions><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="STRING" category="" description="This is the name of the Ewon device as it appears in Talk2M. For Ewon devices connected using the direct data path, this additional parameter is required because the Ewon may have a different name or identification in Talk2M." isLocalOnly="false" name="talk2MDeviceName" ordinal="2"/></PropertyDefinitions><ServiceDefinitions><ServiceDefinition aspect.isAsync="false" category="Talk2M" description="Sends the current Ewon device to offline mode using Talk2M" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="SendEwonOffline"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="Talk2M" description="This service allows you to set the value of specified tag on the current Ewon device using M2Web." isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="UpdateEwonTagValue"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="STRING" description="The name of the tag which is being updated" name="tagName" ordinal="1"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="The value of the tag which is being updated" name="tagValue" ordinal="2"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="Talk2M" description="Wakes the current Ewon device via Talk2M." isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="WakeEwonDevice"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition></ServiceDefinitions><EventDefinitions/><ServiceMappings/><ServiceImplementations><ServiceImplementation description="" handlerName="Script" name="SendEwonOffline"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Sets the current Ewon device to offline mode via Talk2M.
 *
 * @author HMS Networks, MU Americas Solution Center
 */
// simple wrapper function to facilitate early returns
function run() {
  var host = 'https://m2web.talk2m.com/t2mapi/';
  var command = 'getewon?name=' + me.talk2MDeviceName;
  var credentials =
    '&t2maccount=' +
    me.talk2MAccount +
    '&t2musername=' +
    me.talk2MUsername +
    '&t2mpassword=' +
    me.talk2MPassword +
    '&t2mdeveloperid=' +
    me.talk2MDeveloperID;

  var params = {
    url: encodeURI(host + command + credentials) /* STRING */,
  };

  // sends API request to DataMailbox
  var result = Resources['ContentLoaderFunctions'].GetJSON(params);
  if (!result.success) {
    logger.error(
      'Error calling DataMailbox API in SendEwonOffline. Error: ' +
        result['message']
    );
    return;
  }
  var ewon = result.ewon;
  var status = ewon.status;
    command = 'sendoffline?name=' + me.talk2MDeviceName;

  params = {
    url: encodeURI(host + command + credentials) /* STRING */,
  };

  // sends the api request to DataMailBox
  result = Resources['ContentLoaderFunctions'].GetJSON(params);
  logger.warn(JSON.stringify(result));
  if (!result.success) {
    logger.error(
      'Error calling DataMailbox API in SendEwonOffline. Error: ' +
        result['message']
    );
    return;
  }
}
run();
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="UpdateEwonTagValue"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[const T2M_SUCCESS_MESSAGE = 'Success Message';
const INDEXOF_NOT_FOUND = -1;

/*
 * Updates a particular tag on the current Ewon device to a new value.
 *
 * @author HMS Networks, MU Americas Solution Center
 */
// wrapper function for early returns
function run() {
  // url construction
  var host = 'https://m2web.talk2m.com/t2mapi/get/' + me.talk2MDeviceName + '/rcgi.bin/';
  var command = 'UpdateTagForm';
  var tagValues = '?TagName1=' + tagName + '&TagValue1=' + tagValue;
  var ewonCredentials =
    '&t2mdeviceusername=' + me.ewonDeviceUsername + '&t2mdevicepassword=' + me.ewonDevicePassword;
  var credentials =
    '&t2maccount=' +
    me.talk2MAccount +
    '&t2musername=' +
    me.talk2MUsername +
    '&t2mpassword=' +
    me.talk2MPassword +
    '&t2mdeveloperid=' +
    me.talk2MDeveloperID;
  var completeURL = encodeURI(
    host + command + tagValues + credentials + ewonCredentials
  );
  var params = {
    url: completeURL /* STRING */,
  };

  /*
   * Uses getText instead of getJSON because this API request sometimes returns an HTML file.
   * Failures can be JSON or HTML. Success is always HTML. JSON is always failure.
   */
  var result = Resources['ContentLoaderFunctions'].GetText(params);
  try {
    result = JSON.parse(result);
    // if the return message is JSON then something went wrong
    logger.error(
      'Error calling DataMailbox API in UpdateEwonTagValue. Error: ' +
        result['message']
    );
    return;
  } catch (err) {}
  
  // Searching for "Success Message" to confirm a successful write
  if (result.indexOf(T2M_SUCCESS_MESSAGE) === INDEXOF_NOT_FOUND) {
    // The change failed, and returned HTML
    logger.error('Write failed in UpdateEwonTagValue: ' + result);
    return;
  }
  /*
   * Now the function reads back the new value to double check.
   * This command returns all instantaneous tag values.
   */
  command = 'ParamForm?AST_Param=$dtIV$ftT';
  completeURL = encodeURI(host + command + credentials + ewonCredentials);
  params = {
    url: completeURL /* STRING */,
  };
  // Returns a body with tag values and information in the following format:
  /*
    "TagId";"TagName";"Value";"AlStatus";"AlType";"Quality"
    2;"DEMOSTOP";0;0;0;65472
    3;"DEMOSCENARIO";2;0;0;65472
    4;"DEMOINUSE";1;0;0;65472
    5;"LiftStation-A01-FLOW";8770;0;0;65472
    6;"LiftStation-A01-PWR";1;0;0;65472
    7;"LiftStation-B01-FLOW";9160;0;0;65472
    8;"LiftStation-B01-PWR";1;0;0;65472
    */
  result = Resources['ContentLoaderFunctions'].GetText(params);
  var start = result.indexOf('"' + tagName + '"');
  /*
   * start takes us to the index of the tagName occurrence.
   * The offset of 3 accounts for the two " and the one ; before the tag value.
   * tagName.length takes the pointer to the end of the tagName.
   * start + 3 + tagName.length() will point to the first character of value.
   * tagValue.length() will then grab the entire tagValue.
   */
  const tagNameOffset = 3;
  newValue = result.substring(
    start + tagNameOffset + tagName.length,
    start + tagNameOffset + tagName.length + tagValue.length
  );
  if (tagValue == newValue) {
    logger.debug('The value of ' + tagName + ' changed to ' + tagValue + '.');
  } else {
    logger.error(
      'Failed to change the value of ' + tagName + ' to ' + tagValue + '.'
    );
    logger.debug('newValue: ' + tagValue + ', onWriteBack: ' + newValue);
  }
}
run();
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="WakeEwonDevice"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Wakes up the current Ewon device and sets it to online mode via Talk2M.
 *
 * @author HMS Networks, MU Americas Solution Center
 */
// simple wrapper function to facilitate early returns
function run() {
  var host = 'https://m2web.talk2m.com/t2mapi/';
  var command = 'getewon?name=' + me.talk2MDeviceName;
  var credentials =
    '&t2maccount=' +
    me.talk2MAccount +
    '&t2musername=' +
    me.talk2MUsername +
    '&t2mpassword=' +
    me.talk2MPassword +
    '&t2mdeveloperid=' +
    me.talk2MDeveloperID;

  var params = {
    url: encodeURI(host + command + credentials) /* STRING */,
  };

  // sends API request to DataMailbox
  var result = Resources['ContentLoaderFunctions'].GetJSON(params);
  if (!result.success) {
    logger.error(
      'Error calling DataMailbox API in WakeEwonDevice. Error: ' +
        result['message']
    );
    return;
  }
  var ewon = result.ewon;
  var status = ewon.status;
    command = 'wakeup?name=' + me.talk2MDeviceName;

  params = {
    url: encodeURI(host + command + credentials) /* STRING */,
  };

  // sends the api request to DataMailBox
  result = Resources['ContentLoaderFunctions'].GetJSON(params);
  logger.warn(JSON.stringify(result));
  if (!result.success) {
    logger.error(
      'Error calling DataMailbox API in WakeEwonDevice. Error: ' +
        result['message']
    );
    return;
  }
}
run();
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></ServiceImplementations><Subscriptions/></ThingShape><ImplementedShapes/><SharedConfigurationTables/><InstanceDesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></InstanceDesignTimePermissions><InstanceRunTimePermissions/><InstanceVisibilityPermissions><Visibility/></InstanceVisibilityPermissions><ConfigurationChanges><ConfigurationChange changeAction="CREATE" changeReason="header : name : updated, description : updated&#10;" timestamp="2020-10-08T07:34:25.882-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="properties : talk2MDeviceName : added&#10;" timestamp="2020-10-08T07:37:23.819-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : SendEwonOffline : service updated&#10;" timestamp="2020-10-08T07:38:37.523-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : SendEwonOffline : service updated&#10;" timestamp="2020-10-08T07:39:14.168-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : WakeEwonDevice : service updated&#10;" timestamp="2020-10-08T07:40:09.316-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="header : description : updated&#10;" timestamp="2020-10-08T08:17:39.144-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="SetProjectName : []" timestamp="2020-10-08T08:23:34.868-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="SetProjectName : [EwonThingworxConnector]" timestamp="2020-10-08T08:24:13.004-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="SetProjectName : []" timestamp="2020-10-08T08:25:11.736-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="SetProjectName : [EwonThingworxConnector]" timestamp="2020-10-08T08:25:11.752-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : SendEwonOffline : service updated&#10;" timestamp="2020-10-08T08:35:51.504-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : UpdateEwonTagValue : service updated&#10;" timestamp="2020-10-08T08:35:57.944-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : UpdateEwonTagValue : service updated&#10;" timestamp="2020-10-08T08:36:04.838-07:00" user="Administrator"/><ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2020-10-08T08:49:44.602-07:00" user="Administrator"/><ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2020-10-08T08:52:22.830-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : SendEwonOffline : service updated&#10;" timestamp="2020-10-12T05:14:42.666-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : SendEwonOffline : service updated&#10;" timestamp="2020-10-12T05:14:47.645-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : UpdateEwonTagValue : service updated&#10;" timestamp="2020-10-12T05:15:23.761-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : WakeEwonDevice : service updated&#10;" timestamp="2020-10-12T05:16:08.753-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : UpdateEwonTagValue : service updated&#10;" timestamp="2020-10-13T06:03:54.134-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : UpdateEwonTagValue : service updated&#10;" timestamp="2020-10-13T06:05:41.322-07:00" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : UpdateEwonTagValue : service updated&#10;" timestamp="2020-10-13T06:13:15.539-07:00" user="Administrator"/></ConfigurationChanges></ThingTemplate></ThingTemplates><ExtensionPackages/><Organizations/><Menus/><ThingGroups/><Resources/><DataTags/><ThingShapes/><Subsystems/><NotificationContents/></Entities>