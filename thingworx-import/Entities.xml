<?xml version="1.0" encoding="UTF-8" standalone="no"?><Entities build="b9557" majorVersion="9" minorVersion="0" modelPersistenceProviderPackage="PostgresPersistenceProviderPackage" revision="0" schemaVersion="1100" universal="password"><StyleDefinitions/><Networks/><PersistenceProviderPackages/><Mashups/><ScriptFunctionLibraries/><Projects><Project artifactId="" dependsOn="{&quot;extensions&quot;:&quot;&quot;,&quot;projects&quot;:&quot;&quot;}" description="" documentationContent="" groupId="" homeMashup="" lastModifiedDate="2020-08-26T18:18:38.102Z" minPlatformVersion="" name="FlexyConnector" packageVersion="1.0.0" projectName="FlexyConnector" publishResult="" state="DRAFT" tags=""><Owner name="Administrator" type="User"/><avatar/><DesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></DesignTimePermissions><RunTimePermissions/><VisibilityPermissions><Visibility/></VisibilityPermissions><ConfigurationTableDefinitions/><ConfigurationTables/><ConfigurationChanges><ConfigurationChange changeAction="CREATE" changeReason="header : name : updated&#10;" timestamp="2020-07-02T20:40:10.979Z" user="Administrator"/><ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2020-08-19T17:39:55.874Z" user="Administrator"/></ConfigurationChanges></Project></Projects><Users/><DirectoryServices/><Widgets/><MediaEntities/><Groups/><PersistenceProviders/><ModelTags/><LocalizationTables/><Dashboards/><StyleThemes/><DataShapes><DataShape baseDataShape="" description="" documentationContent="" homeMashup="" lastModifiedDate="2020-08-26T18:18:38.102Z" name="AlarmInformation" projectName="FlexyConnector" tags=""><Owner name="Administrator" type="User"/><avatar/><DesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></DesignTimePermissions><RunTimePermissions/><VisibilityPermissions><Visibility/></VisibilityPermissions><ConfigurationTableDefinitions/><ConfigurationTables/><FieldDefinitions><FieldDefinition aspect.isPrimaryKey="false" baseType="STRING" description="" name="Status" ordinal="3"/><FieldDefinition aspect.isPrimaryKey="false" baseType="STRING" description="" name="TagName" ordinal="5"/><FieldDefinition aspect.isPrimaryKey="false" baseType="STRING" description="" name="Type" ordinal="4"/></FieldDefinitions><ConfigurationChanges><ConfigurationChange changeAction="CREATE" changeReason="header : name : updated&#10;" timestamp="2020-07-30T16:11:54.195Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="fields : status : added, Status : updated, Type : added, Value : deleted, Name : deleted&#10;" timestamp="2020-07-30T16:12:33.408Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="fields : TagName : added&#10;" timestamp="2020-07-30T16:20:00.822Z" user="Administrator"/><ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2020-08-19T17:39:55.858Z" user="Administrator"/></ConfigurationChanges></DataShape></DataShapes><Things><Thing description="" documentationContent="" effectiveThingPackage="ConfiguredThing" enabled="true" homeMashup="" identifier="" inheritedValueStream="" lastModifiedDate="2020-08-26T18:18:38.196Z" name="MachineTemplate" projectName="FlexyConnector" published="false" tags="" thingTemplate="GenericThing" valueStream="FlexyConnectorValueStream"><Owner name="Administrator" type="User"/><avatar/><DesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></DesignTimePermissions><RunTimePermissions/><VisibilityPermissions><Visibility/></VisibilityPermissions><ConfigurationTableDefinitions/><ConfigurationTables/><ThingShape><PropertyDefinitions/><ServiceDefinitions/><EventDefinitions/><ServiceMappings/><ServiceImplementations/><Subscriptions/></ThingShape><PropertyBindings/><RemotePropertyBindings/><RemoteServiceBindings/><RemoteEventBindings/><AlertConfigurations/><ImplementedShapes/><ThingProperties/><ConfigurationChanges><ConfigurationChange changeAction="CREATE" changeReason="header : name : updated, valueStream : updated, projectName : updated&#10;" timestamp="2020-08-24T14:12:15.906Z" user="Administrator"/></ConfigurationChanges></Thing><Thing description="" documentationContent="" effectiveThingPackage="StreamThing" enabled="true" homeMashup="StreamMashup" identifier="" inheritedValueStream="" lastModifiedDate="2020-08-26T18:18:38.213Z" name="AlarmStreamTemplate" projectName="FlexyConnector" published="false" tags="" thingTemplate="Stream" valueStream=""><Owner name="Administrator" type="User"/><avatar/><DesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></DesignTimePermissions><RunTimePermissions/><VisibilityPermissions><Visibility/></VisibilityPermissions><ConfigurationTableDefinitions/><ConfigurationTables><ConfigurationTable dataShapeName="" description="Data Thing Configuration" isMultiRow="false" name="DataThingSettings" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="Persistence Provider Name" name="persistenceProvider" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><persistenceProvider><![CDATA[ThingworxPersistenceProvider]]></persistenceProvider></Row></Rows></ConfigurationTable><ConfigurationTable dataShapeName="" description="Data Shape Configuration" isMultiRow="false" name="Settings" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition aspect.friendlyName="Data Shape" baseType="DATASHAPENAME" description="Data shape" name="dataShape" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><accumulatedDataShape><json><![CDATA[{"fieldDefinitions":{"Status":{"name":"Status","aspects":{"isPrimaryKey":false},"description":"","baseType":"STRING","ordinal":0},"Type":{"name":"Type","aspects":{"isPrimaryKey":false},"description":"","baseType":"STRING","ordinal":2},"TagName":{"name":"TagName","aspects":{"isPrimaryKey":false},"description":"","baseType":"STRING","ordinal":1}}}]]></json></accumulatedDataShape><dataShape><![CDATA[AlarmInformation]]></dataShape></Row></Rows></ConfigurationTable><ConfigurationTable dataShapeName="" description="Configurable options to tune Stream performance" isMultiRow="false" name="PersistenceProviderCustomSettings" ordinal="2"><DataShape><FieldDefinitions><FieldDefinition aspect.friendlyName="Persistence Provider Custom Settings Table" baseType="INFOTABLE" description="Persistence Provider Custom Config Table" name="customConfigTable" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><customConfigTable><infoTable><DataShape><FieldDefinitions/></DataShape><Rows/></infoTable></customConfigTable></Row></Rows></ConfigurationTable></ConfigurationTables><ThingShape><PropertyDefinitions/><ServiceDefinitions/><EventDefinitions/><ServiceMappings/><ServiceImplementations/><Subscriptions/></ThingShape><PropertyBindings/><RemotePropertyBindings/><RemoteServiceBindings/><RemoteEventBindings/><AlertConfigurations/><ImplementedShapes/><ThingProperties/><ConfigurationChanges><ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2020-08-19T17:39:55.974Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="" timestamp="2020-08-21T17:55:41.892Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="" timestamp="2020-08-26T18:18:38.212Z" user="Administrator"/></ConfigurationChanges></Thing><Thing description="Hosts all services for this connector." documentationContent="" effectiveThingPackage="TimerThing" enabled="true" homeMashup="" identifier="" inheritedValueStream="" lastModifiedDate="2020-08-26T18:39:16.380Z" name="ConnectorHost" projectName="FlexyConnector" published="false" tags="" thingTemplate="Timer" valueStream=""><Owner name="Administrator" type="User"/><avatar/><DesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></DesignTimePermissions><RunTimePermissions/><VisibilityPermissions><Visibility/></VisibilityPermissions><ConfigurationTableDefinitions/><ConfigurationTables><ConfigurationTable dataShapeName="" description="General Settings" isHidden="true" isMultiRow="false" name="Settings" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition aspect.defaultValue="true" baseType="BOOLEAN" description="Automatically enable timer on startup" name="enabled" ordinal="0"/><FieldDefinition baseType="USERNAME" description="User context in which to run event handlers" name="runAsUser" ordinal="0"/><FieldDefinition aspect.defaultValue="60000.0" baseType="NUMBER" description="Update rate" name="updateRate" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><enabled>true</enabled><runAsUser><![CDATA[Administrator]]></runAsUser><updateRate>40000.0</updateRate></Row></Rows></ConfigurationTable></ConfigurationTables><ThingShape><PropertyDefinitions><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="AlarmStreamTemplate" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="alarmStreamToCopy" ordinal="13"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="14" aspect.isPersistent="true" aspect.units="Days" baseType="INTEGER" category="" description="Any tags older than this amount of days will be removed by the purgeDataStreams service" isLocalOnly="false" name="daysToKeep" ordinal="15"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="GeneralMachine" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="generalMachineName" ordinal="16"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="MachineTemplate" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="genericMachineToCopy" ordinal="15"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="DATETIME" category="" description="" isLocalOnly="false" name="lastUpdateTime" ordinal="16"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="30" aspect.isPersistent="true" aspect.units="seconds" baseType="INTEGER" category="" description="" isLocalOnly="false" name="scriptTimeoutSeconds" ordinal="12"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="talk2MAccount" ordinal="12"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="talk2MDeveloperID" ordinal="12"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="talk2MPassword" ordinal="10"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="talk2MToken" ordinal="9"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="talk2MUsername" ordinal="11"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="10" aspect.isPersistent="true" aspect.units="" baseType="INTEGER" category="" description="" isLocalOnly="false" name="updateTimeoutMinutes" ordinal="16"/><PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="false" aspect.isPersistent="true" baseType="BOOLEAN" category="" description="true indicates that stream data items will be organised into various streams depending on how the data item's name is formatted with regards to a hyphen." isLocalOnly="false" name="useHyphens" ordinal="15"/></PropertyDefinitions><ServiceDefinitions><ServiceDefinition aspect.isAsync="true" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="CleanAllData"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="InsertAlarmItem"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition baseType="STRING" description="" name="alarmStatus" ordinal="5"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="alarmType" ordinal="4"/><FieldDefinition baseType="STRING" description="" name="ewonName" ordinal="3"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="tagName" ordinal="1"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="timestamp" ordinal="4"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="InsertNonloggedItem"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition baseType="STRING" description="" name="ewonName" ordinal="2"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="tagName" ordinal="1"/><FieldDefinition baseType="STRING" description="" name="tagValue" ordinal="3"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="InsertStreamItem"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="ewonName" ordinal="2"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="tagName" ordinal="1"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="tagQuality" ordinal="5"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="tagValue" ordinal="3"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="timestamp" ordinal="4"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="true" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="MainExecution"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="true" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="ProcessTimeSinceUpdate"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="BOOLEAN" description="" name="hasUpdated" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="PurgeValueStreams"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="true" category="" description="Landing function that an ewon can connect to" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="TakeInfo"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="Tags" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="true" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="Talk2MDelete"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="transactionId" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="Talk2MGetData"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="Grabs all historical data from the DataMailbox then cleans all of the recieved data from data mailbox" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="Talk2MSyncData"><ResultType baseType="JSON" description="returns usedTransactionId which is the most recent TransactionId actually processed and ready for deletion and nextTransactionId, the next transaction id to be called." name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.defaultValue="-1" baseType="INTEGER" description="" name="initialTransactionId" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="true" category="" description="Sets a Ewon to offline or online depended on if it was online or offline to begin with" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="Talk2MTurnOnOrOff"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="name" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="true" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="Talk2MUpdateTagForm"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition baseType="STRING" description="" name="ewonName" ordinal="2"/><FieldDefinition baseType="STRING" description="" name="ewonPassword" ordinal="5"/><FieldDefinition baseType="STRING" description="" name="ewonUsername" ordinal="4"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="tagName" ordinal="1"/><FieldDefinition baseType="STRING" description="" name="tagValue" ordinal="3"/></ParameterDefinitions></ServiceDefinition></ServiceDefinitions><EventDefinitions/><ServiceMappings/><ServiceImplementations><ServiceImplementation description="" handlerName="Script" name="CleanAllData"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Cleans all data storage objects created by this connector.
 *
 * @author HMS Networks, MU Americas Solution Center
 * @version 1.2
 */
function cleanEntity(entity) {
  // Checks for '-' If that substring exists, then the entity is deleted.
  if (entity.name.includes('-')) {
    var params = {
      name: entity.name /* THINGNAME */,
    };
    Resources['EntityServices'].DeleteThing(params);
    logger.debug(entity.name + ' has been deleted.');
  }
}
/*
 * Deleting a thing without first purging the historical property data associated with
 * that thing will lead to a memory leak.
 */
// This will allow purging from the dawn of time
var startDate = '0000-01-01T00:00:00.000-00:00';
var NUMBER_MILLISECONDS_IN_DAY = 86400000;
// end Date is one day in the future
var endDate = new Date(Date.now() + NUMBER_MILLISECONDS_IN_DAY);
/*
 * rows is an array of every entity in this project.
 * This includes the project itself.
 */
var rows = Projects[me.GetProjectName()].GetEntities().ToJSON().rows;
var i;
var entity;
for (i = 0; i < rows.length; i += 1) {
  entity = rows[i];
  // all property histories are purged
  if (entity.name.includes('-')) {
    Things[entity.name].PurgeAllPropertyHistory({
      endDate: endDate /* DATETIME */,
      startDate: startDate /* DATETIME */,
    });
  }
}

// rows contains all Entities of the project in an array
rows = Projects[me.GetProjectName()].GetEntities().ToJSON().rows;
for (i = 0; i < rows.length; i += 1) {
  cleanEntity(rows[i]);
}
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="InsertAlarmItem"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Inserts an alarm in the proper alarm stream
 *
 * @author HMS Networks, MU Americas Solution Center
 * @version 1.2
 */
// wrapper function for early returns
function run() {
  var suffix = '-StreamAlarm';
  var streamName = ewonName + suffix;
  // alarm streams are organized by Ewon
  try {
    var nameTest;
    /*
     * Attempting to access a thing in order to check if it exists.
     * The assignment just makes warnings go away.
     */
    nameTest = Things[streamName].name;
  } catch (err) {
    // stream needs to be created
    var params = {
      name: streamName /* STRING */,
      description: undefined /* STRING */,
      sourceThingName: me.alarmStreamToCopy /* THINGNAME */,
      tags: undefined /* TAGS */,
    };
    // all 3 below lines are needed to setup a cloned thing for the first time
    Resources['EntityServices'].CloneThing(params);
    Things[streamName].EnableThing();
    Things[streamName].RestartThing();
  }
  // returns an empty infotable row to be filled with values
  var rowValues = Things[streamName].CreateValues();
  rowValues.TagName = tagName;
  rowValues.Type = alarmType;
  rowValues.Status = alarmStatus;
  Things[streamName].AddStreamEntry({
    timestamp: new Date(timestamp),
    sourceType: undefined /* STRING */,
    values: rowValues /* INFOTABLE */,
    location: undefined /* LOCATION */,
    source: ewonName /* STRING */,
    tags: undefined,
  });
}
if (tagName && ewonName && alarmType && timestamp && alarmStatus) {
  run();
} else {
  logger.error(
    'One or more parameters for InsertAlarmItem were undefined or null.'
  );
  logger.debug(
    'tagName: ' +
      tagName +
      ' ewonName: ' +
      ewonName +
      ' alarmStatus: ' +
      alarmStatus +
      ' timestamp: ' +
      timestamp +
      ' alarmType:' +
      alarmType
  );
}
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="InsertNonloggedItem"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Inserts/updates a tag value in the proper data table.
 *
 * @author HMS Networks, MU Americas Solution Center
 * @version 1.2
 */
// wrapper function to allow for early returns
function run() {
  var thingName;
  var suffix = '-non-loggedProperties';
  if (tagName.indexOf('-') === -1 || !me.useHyphens) {
    // assign the data to the general data table
    thingName = ewonName + '-' + me.generalMachineName + suffix;
  } else {
    var referenceName = tagName.substring(0, tagName.indexOf('-'));
    thingName = ewonName + '-' + referenceName;
  }
  try {
    var nameTest;
    /*
     * Attempting to access a thing in order to check if it exists.
     * The assignment just makes warnings go away.
     */
    nameTest = Things[thingName].name;
  } catch (err) {
    // a data table needs to be created
    var params = {
      name: thingName /* STRING */,
      description: undefined /* STRING */,
      sourceThingName: me.genericMachineToCopy /* THINGNAME */,
      tags: undefined /* TAGS */,
    };
    // all of these are needed to create and setup a thing
    Resources['EntityServices'].CloneThing(params);
    Things[thingName].EnableThing();
    Things[thingName].RestartThing();
  }
  // checks to see if this property exists
  try {
    Things[thingName].GetPropertyDefinition({name: tagName /* STRING */});
  } catch (err) {
    // the property does not exist and must be created
    // creates the property
    Things[thingName].AddPropertyDefinition({
      readOnly: false /* BOOLEAN */,
      remote: false /* BOOLEAN */,
      type: 'STRING' /* BASETYPENAME */,
      logged: false /* BOOLEAN */,
      name: tagName /* STRING */,
      persistent: true /* BOOLEAN */,
    });
  }
  Things[thingName][tagName] = tagValue;
}
if (tagName && ewonName && tagValue) {
  run();
} else {
  logger.error(
    'One or more parameters for InsertDataTableItem were undefined or null.'
  );
  logger.debug(
    'tagName: ' + tagName + ' ewonName: ' + ewonName + 'tagValue: ' + tagValue
  );
}
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="InsertStreamItem"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Inserts/updates a tag value in the proper stream
 *
 * @author HMS Networks, MU Americas Solution Center
 * @version 1.2
 */
// wrapper function for early returns
function run() {
  var thingName;
  var suffix = '-loggedProperties';
  if (tagName.indexOf('-') === -1 || !me.useHyphens) {
    // assign the data to the general machine
    thingName = ewonName + '-' + me.generalMachineName + suffix;
  } else {
    // assign the data to a specific machine
    var referenceName = tagName.substring(0, tagName.indexOf('-'));
    thingName = ewonName + '-' + referenceName;
  }

  try {
    var nameTest;
    /*
     * Attempting to access a thing in order to check if it exists.
     * The assignment just makes warnings go away.
     */
    nameTest = Things[thingName].name;
  } catch (err) {
    // Thing needs to be created
    var params = {
      name: thingName /* STRING */,
      description: undefined /* STRING */,
      sourceThingName: me.genericMachineToCopy /* THINGNAME */,
      tags: undefined /* TAGS */,
    };
    // all 3 below lines are needed to setup a cloned thing for the first time
    Resources['EntityServices'].CloneThing(params);
    Things[thingName].EnableThing();
    Things[thingName].RestartThing();
  }

  // checks to see if this property exists
  var propertyMustBeCreated = false;
  var propertyLogging;
  try {
    /*
     * Ensure that logging is turned on for this property.
     * Will throw an error if the property does not exist.
     */
    propertyLogging = Things[thingName].GetPropertyLogging({
      propertyName: tagName /* STRING */,
    });
  } catch (err) {
    // the property does not exist and must be created
    propertyMustBeCreated = true;
  }
  if (!propertyLogging) {
    /*
     * The property was already created but logging was turned off.
     * Either the property was created first by insertDataTableItem or the property
     * was changed to be logged.
     * The property must be deleted so insertStreamItem can create the property with
     * the right configuration.
     */
    Things[thingName].RemovePropertyDefinition({
      name: tagName /* STRING */,
    });
    propertyMustBeCreated = true;
  }

  if (propertyMustBeCreated) {
    // decides whether to create this value as a number(float) or integer
    var numberType;
    if (tagValue.includes('.')) {
      numberType = 'NUMBER';
    } else {
      numberType = 'INTEGER';
    }
    // creates the property
    Things[thingName].AddPropertyDefinition({
      readOnly: false /* BOOLEAN */,
      remote: false /* BOOLEAN */,
      type: numberType /* BASETYPENAME */,
      logged: true /* BOOLEAN */,
      name: tagName /* STRING */,
      persistent: true /* BOOLEAN */,
    });
  }

  // gets the value of baseType
  var propertyDefinition = Things[thingName].GetPropertyDefinition({
    name: tagName /* STRING */,
  });
  var baseType = propertyDefinition[0].baseType;

  // parses tagValue based on whether baseType is an INTEGER or a NUMBER
  var value;
  if (baseType === 'NUMBER') {
    // NUMBER is equivalent to a float
    value = parseFloat(tagValue);
  } else if (baseType === 'INTEGER') {
    value = parseInt(tagValue);
  } else {
    logger.error('InsertStreamItem Error: baseType is not NUMBER or INTEGER.');
    logger.debug('Base type was ' + baseType);
    // attempt to insert as float anyway so data is not lost
    value = parseFloat(tagValue);
  }
  /*
   * UpdatePropertyValues expects an infotable with one row.
   * infoTableName can be anything.
   * dataShapeName must be NamedVTQ.
   * VTQ stands for 'value, time, quality'.
   */
  var updateValues = Resources[
    'InfoTableFunctions'
  ].CreateInfoTableFromDataShape({
    infoTableName: 'UpdatePropertiesInfoTableTMP' /* STRING */,
    dataShapeName: 'NamedVTQ' /* DATASHAPENAME */,
  });
  var time = new Date(timestamp);
  // more rows can be added but only the most recent is actually inserted
  updateValues.AddRow({
    time: time,
    name: tagName,
    quality: tagQuality,
    value: value,
  });

  Things[thingName].UpdatePropertyValues({values: updateValues});
}
if (tagName && ewonName && tagValue && timestamp && tagQuality) {
  run();
} else {
  logger.error(
    'One or more parameters for InsertStreamItem were undefined or null.'
  );
  logger.debug(
    'tagName: ' +
      tagName +
      ' ewonName: ' +
      ewonName +
      'tagValue: ' +
      tagValue +
      'timestamp: ' +
      timestamp +
      'tagQuality: ' +
      tagQuality
  );
}
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="MainExecution"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Main Execution loop of the Connector, updates all data and deletes used data from DataMailbox.
 *
 * @author HMS Networks, MU Americas Solution Center
 * @version 1.2
 */
var startTimeMillis = Date.now();

// these are run here for code simplicity
me.PurgeValueStreams();
me.Talk2MGetData();

/*
 * Current configured script timeout length.
 * Exceeding this will throw errors.
 */
var timeoutLengthMillis = me.scriptTimeoutSeconds * 1000;

// the next transaction id to be used
var nextTransactionId = -1;

// the transaction id that was just used and is safe to be deleted
var oldTransactionId = -1;

// the longest time that Talk2MSyncData has taken to Execute
var longestSyncDataExecutionMillis = 0;

// decreasing this buffer will cause this service to ride closer to the edge of a timeout error
var syncDataIncreaseBufferMillis = 1000;
var getResult;

var timeElapsedMillis = Date.now() - startTimeMillis;

/*
 * Once timeElapsedMillis is greater than maxExecutionTimeMillis, no more Talk2MSyncData calls will be made.
 * This should be enough time that even if a Talk2MSyncData execution was started 1 millisecond before maxExecutionTimeMillis,
 * a timeout error would still not occur.
 */
var maxExecutionTimeMillis =
  timeoutLengthMillis -
  (longestSyncDataExecutionMillis + syncDataIncreaseBufferMillis);
/*
 * This loop calls Talk2MSyncData as many times as it can within maxExecutionTimeMillis.
 */
while (timeElapsedMillis < maxExecutionTimeMillis) {
  // clocks how long each Talk2MSyncData call takes
  var syncDataStartExecutionMillis = Date.now();
  getResult = me.Talk2MSyncData({
    initialTransactionId: nextTransactionId /* INTEGER */,
  });
  var syncDataEndExecutionMillis = Date.now();

  // only updates longestSyncDataExecutionMillis when this is the longest Execution
  if (
    syncDataEndExecutionMillis - syncDataStartExecutionMillis >
    longestSyncDataExecutionMillis
  ) {
    longestSyncDataExecutionMillis =
      syncDataEndExecutionMillis - syncDataStartExecutionMillis;
  }

  // update transaction ids to recent values
  nextTransactionId = getResult.nextTransactionId;
  oldTransactionId = getResult.oldTransactionId;

  if (getResult.done) {
    // when there is no more data oldTransactionId has to be updated so that Talk2MDelete works
    oldTransactionId = nextTransactionId;
    break;
  }

  // updating timing variables for while loop
  maxExecutionTimeMillis =
    timeoutLengthMillis -
    (longestSyncDataExecutionMillis + syncDataIncreaseBufferMillis);
  timeElapsedMillis = Date.now() - startTimeMillis;
}
if (!getResult.done) {
  logger.warn(
    'Syncdata was not able to execute within the set timeout length. To resolve this, ' +
      'increase scriptTimeout in platform-settings.json, or run MainExecution more often.'
  );
}

// oldTransactionId is only -1 when no data was in DataMailbox
if (oldTransactionId <= 0) {
  // there has been no new update of information
  me.ProcessTimeSinceUpdate({hasUpdated: false});
} else {
  // There was new information, most recent update time is now
  me.ProcessTimeSinceUpdate({hasUpdated: true});
}

me.Talk2MDelete({
  transactionId: oldTransactionId,
});
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="ProcessTimeSinceUpdate"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Keeps track of the time since the last data update was received. If the time
 * is long enough, then an error is sent.
 *
 * @author HMS Networks, MU Americas Solution Center
 * @version 1.2
 */
const MILLISECONDS_IN_MINUTES = 60000;
if (hasUpdated) {
  // There was an update, so the last update time is changed to now
  me.lastUpdateTime = Date.now();
} else {
  const timeSinceLastUpdate = Date.now() - me.lastUpdateTime;
  const maximumAllowedTimeSinceLastUpdate =
    MILLISECONDS_IN_MINUTES * me.updateTimeoutMinutes;
  if (timeSinceLastUpdate > maximumAllowedTimeSinceLastUpdate) {
    logger.error(
      'A data update has not been received since ' + me.lastUpdateTime
    );
  }
}
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="PurgeValueStreams"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Deletes data older than daysToKeep from streams.
 *
 * @author HMS Networks, MU Americas Solution Center
 * @version 1.2
 */
// This will allow purging from the dawn of time
var startDate = '0000-01-01T00:00:00.000-00:00';
var daysToKeep = me.daysToKeep;
var NUMBER_MILLISECONDS_IN_DAY = 86400000;
var endDate = new Date(Date.now() - daysToKeep * NUMBER_MILLISECONDS_IN_DAY);
/*
 * rows is an array of every entity in this project.
 * This includes the project itself.
 */
var rows = Projects[me.GetProjectName()].GetEntities().ToJSON().rows;
var i;
var entity;
for (i = 0; i < rows.length; i += 1) {
  entity = rows[i];
  // all property histories are purged
  if (entity.name.includes('-')) {
    Things[entity.name].PurgeAllPropertyHistory({
      endDate: endDate /* DATETIME */,
      startDate: startDate /* DATETIME */,
    });
  }
}
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="TakeInfo"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Alternative method that avoids using DataMailbox to send data to Thingworx.
 * Uses a Ewon Thingworx connector which runs on a Flexy.
 * More information can be found in the README.md file.
 *
 * @author HMS Networks, MU Americas Solution Center
 * @version 1.2
 */
// wrapper function to enable early returns
function run() {
  var parsedTags = JSON.parse(Tags);
  var ewonName = parsedTags.info['ewon-name'];
  // tagArray holds the datapoints array which contains all logged data
  var tagArray = parsedTags.datapoints;

  var i;
  for (i = 0; i < tagArray.length; i += 1) {
    var tag = tagArray[i];
    me.InsertStreamItem({
      tagName: tag.name /* STRING */,
      ewonName: ewonName /* STRING */,
      tagValue: tag.value /* STRING */,
      timestamp: tag.timestamp /* STRING */,
    });
  }
  // updates all non-logged data
  keys = Object.keys(parsedTags.info);
  for (i = 0; i < keys.length; i += 1) {
    me.InsertNonloggedItem({
      ewonName: ewonName /* STRING */,
      tagValue: parsedTags.info[keys[i]] /* STRING */,
      tagName: keys[i] /* STRING */,
    });
  }
}
// Purges old data
me.PurgeValueStreams();
run();
// Registers that an update has been received
me.ProcessTimeSinceUpdate({hasUpdated: true});
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="Talk2MDelete"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Deletes all data from transactionId or earlier from DataMailbox.
 *
 * @author HMS Networks, MU Americas Solution Center
 * @version 1.2
 */
// wrapper function to enable early returns
function run() {
  var url = 'https://data.talk2m.com/delete';

  var talk2MParameters =
    't2mdevid=' +
    me.talk2MDeveloperID +
    '&t2mtoken=' +
    me.talk2MToken +
    '&transactionId=' +
    transactionId;

  var headerJSON = {
    'Content-Type': 'application/x-www-form-urlencoded',
  };
  var params = {
    headers: headerJSON /* JSON */,
    url: encodeURI(url) /* STRING */,
    content: talk2MParameters /* JSON */,
  };

  /*
   * sends API request to DataMailbox
   * response: JSON as a string
   */
  var response = Resources['ContentLoaderFunctions'].PostText(params);
  /*
   * There is some unnecessary information about the post call appended to the end of the response.
   * Parsing the response from the start to the last bracket avoids any errors.
   */
  response = JSON.parse(response.substring(0, response.lastIndexOf('}') + 1));
  if (!response['success']) {
    logger.error(
      'Error calling DataMailbox API in Talk2MDelete. Error: ' +
        response['message']
    );
    return;
  }
  logger.debug(
    'Successfully deleted all tags of transaction id: ' +
      transactionId +
      ' or earlier.'
  );
}
/*
 * -1 is the first transaction ID sent to DataMailbox through SyncData. If the DataMailbox is empty then
 * -1 can end up getting sent to this service where it must be discarded as an invalid value.
 */
var INVALID_TRANSACTION_ID_VALUE = -1;
if (transactionId != INVALID_TRANSACTION_ID_VALUE) {
  run();
}
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="Talk2MGetData"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Talk2MGetData gets and inserts all non-logged data from DataMailbox.
 *
 * @author HMS Networks, MU Americas Solution Center
 * @version 1.2
 */
function parseEwon(ewon) {
  var ewonName = ewon.name.trim();
  // insert data table item is called on all nonlogged tags
  ewon.tags.forEach((tag) => {
    if (tag.history == null) {
      me.InsertNonloggedItem({
        tagName: tag.name,
        ewonName: ewonName,
        tagValue: tag.value,
      });
    }
  });
}

// wrapper function to enable early returns
function run() {
  var NUMBER_MILLISECONDS_IN_DAY = 86400000;
  var oneDayInTheFuture = new Date(Date.now() + NUMBER_MILLISECONDS_IN_DAY);
  /*
   * This calculation always assumes the timezone is UTC.
   * This is acceptable since any date in the future works.
   * the time format that DataMailbox wants MUST be yyyy-MM-ddTHH:mm:ssZ
   */
  var formattedTime =
    dateFormat(oneDayInTheFuture, 'yyyy-MM-dd HH:mm:ss').replace(' ', 'T') +
    'Z';

  var url = 'https://data.talk2m.com/getdata';

  var talk2MParameters =
    't2mdevid=' +
    me.talk2MDeveloperID +
    '&t2mtoken=' +
    me.talk2MToken +
    '&fullconfig=' + // fullconfig needs no value
    '&from=' +
    formattedTime;

  var headerJSON = {
    'Content-Type': 'application/x-www-form-urlencoded',
  };
  var params = {
    headers: headerJSON /* JSON */,
    url: encodeURI(url) /* STRING */,
    content: talk2MParameters /* JSON */,
  };

  /*
   * sends API request to DataMailbox
   * response: JSON as a string
   */
  var response = Resources['ContentLoaderFunctions'].PostText(params);
  /*
   * There is some unnecessary information about the post call appended to the end of the response.
   * Parsing the response from the start to the last bracket avoids any errors.
   */
  response = JSON.parse(response.substring(0, response.lastIndexOf('}') + 1));
  if (!response['success']) {
    logger.error(
      'Error calling DataMailbox API in Talk2MGetData. Error: ' +
        response['message']
    );
    return;
  }
  // This likely means that the logged data is not properly being filtered out
  if (response.moreDataAvailable) {
    logger.error('JSON message exceeds maximum limit.');
  }

  var ewons = response.ewons;
  ewons.forEach(parseEwon);
}
run();
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="Talk2MSyncData"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Talk2MSyncData gets and inserts all logged data from DataMailbox.
 *
 * @author HMS Networks, MU Americas Solution Center
 * @version 1.2
 */
function parseEwon(ewon) {
  var ewonName = ewon.name.trim();
  // calls InsertStreamItem on all historical tags
  ewon.tags.forEach((tag) => {
    var i;
    if (tag.history) {
      // tag contains historical information
      for (i = 0; i < tag.history.length; i += 1) {
        var historicalTag = tag.history[i];
        me.InsertStreamItem({
          tagName: tag.name /* STRING */,
          ewonName: ewonName /* STRING */,
          tagValue: historicalTag.value /* STRING */,
          timestamp: historicalTag.date /* STRING */,
          tagQuality: tag.quality /* STRING */
        });
      }
    }
    if (tag.alarmHistory) {
      // tag has a history with alarms
      for (i = 0; i < tag.alarmHistory.length; i += 1) {
        var alarm = tag.alarmHistory[i];
        me.InsertAlarmItem({
          tagName: tag.name /* STRING */,
          ewonName: ewonName /* STRING */,
          timestamp: alarm.date /* STRING */,
          alarmType: alarm.type /* STRING */,
          alarmStatus: alarm.status /* STRING */,
        });
      }
    }
  });
}
// wrapper function to enable early returns
function run() {
  var url = 'https://data.talk2m.com/syncdata';

  var talk2MParameters =
    't2mdevid=' +
    me.talk2MDeveloperID +
    '&t2mtoken=' +
    me.talk2MToken +
    '&createTransaction=true' +
    '&lastTransactionid=' +
    initialTransactionId;

  var headerJSON = {
    'Content-Type': 'application/x-www-form-urlencoded',
  };
  var params = {
    headers: headerJSON /* JSON */,
    url: encodeURI(url) /* STRING */,
    content: talk2MParameters /* JSON */,
  };

  /*
   * sends API request to DataMailbox
   * response: JSON as a string
   */
  var response = Resources['ContentLoaderFunctions'].PostText(params);
  /*
   * There is some unnecessary information about the post call appended to the end of the response.
   * Parsing the response from the start to the last bracket avoids any errors.
   */
  response = JSON.parse(response.substring(0, response.lastIndexOf('}') + 1));
  if (!response['success']) {
    logger.error(
      'Error calling DataMailbox API in Talk2MSyncData. Error: ' +
        response['message']
    );
    return;
  }
  var ewons = response.ewons;
  ewons.forEach(parseEwon);
  // check to see if more data is available, if so, store that value to be returned later
  var done = false;
  if (response.moreDataAvailable === undefined) {
    done = true;
  }
  return {
    oldTransactionId: initialTransactionId,
    nextTransactionId: response.transactionId,
    done: done,
  };
}
// this acts as a return statement
var result = run();
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="Talk2MTurnOnOrOff"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Sets an Ewon to offline or online depending on if it was online or offline to begin with.
 *
 * @author HMS Networks, MU Americas Solution Center
 * @version 1.2
 */
// simple wrapper function to facilitate early returns
function run() {
  var host = 'https://m2web.talk2m.com/t2mapi/';
  var command = 'getewon?name=' + name;
  var credentials =
    '&t2maccount=' +
    me.talk2MAccount +
    '&t2musername=' +
    me.talk2MUsername +
    '&t2mpassword=' +
    me.talk2MPassword +
    '&t2mdeveloperid=' +
    me.talk2MDeveloperID;

  var params = {
    url: encodeURI(host + command + credentials) /* STRING */,
  };

  // sends API request to DataMailbox
  var result = Resources['ContentLoaderFunctions'].GetJSON(params);
  if (!result.success) {
    logger.error(
      'Error calling DataMailbox API in Talk2MTurnOnOrOff. Error: ' +
        result['message']
    );
    return;
  }
  var ewon = result.ewon;
  var status = ewon.status;
  // logic that decides whether to send a sendoffline request or a wakeup request
  if (status === 'online') {
    command = 'sendoffline?name=' + name;
  } else if (status === 'offline') {
    command = 'wakeup?name=' + name;
  } else {
    logger.error(
      'Talk2MTurnOnOrOff unexpected status: The Ewon Device status was something other than offline/online'
    );
    return;
  }

  params = {
    url: encodeURI(host + command + credentials) /* STRING */,
  };

  // sends the api request to DataMailBox
  result = Resources['ContentLoaderFunctions'].GetJSON(params);
  logger.warn(JSON.stringify(result));
  if (!result.success) {
    logger.error(
      'Error calling DataMailbox API in Talk2MTurnOnOrOff. Error: ' +
        result['message']
    );
    return;
  }
}
run();
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="Talk2MUpdateTagForm"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 * Updates a particular tag on a particular Ewon to a new value.
 *
 * @author HMS Networks, MU Americas Solution Center
 * @version 1.2
 */
// wrapper function for early returns
function run() {
  // url construction
  var host = 'https://m2web.talk2m.com/t2mapi/get/' + ewonName + '/rcgi.bin/';
  var command = 'UpdateTagForm';
  var tagValues = '?TagName1=' + tagName + '&TagValue1=' + tagValue;
  var ewonCredentials =
    '&t2mdeviceusername=' + ewonUsername + '&t2mdevicepassword=' + ewonPassword;
  var credentials =
    '&t2maccount=' +
    me.talk2MAccount +
    '&t2musername=' +
    me.talk2MUsername +
    '&t2mpassword=' +
    me.talk2MPassword +
    '&t2mdeveloperid=' +
    me.talk2MDeveloperID;
  var completeURL = encodeURI(
    host + command + tagValues + credentials + ewonCredentials
  );
  var params = {
    url: completeURL /* STRING */,
  };

  /*
   * Uses getText instead of getJSON because this API request sometimes returns an HTML file.
   * Failures can be JSON or HTML. Success is always HTML. JSON is always failure.
   */
  var result = Resources['ContentLoaderFunctions'].GetText(params);
  try {
    result = JSON.parse(result);
    // if the return message is JSON then something went wrong
    logger.error(
      'Error calling DataMailbox API in Talk2MUpdateTagForm. Error: ' +
        result['message']
    );
    return;
  } catch (err) {}
  const t2mSuccessMessage = 'Success Message';
  // Searching for "Success Message" to confirm a successful write
  if (result.indexOf(t2mSuccessMessage) === -1) {
    // The change failed, and returned HTML
    logger.error('Write failed in Talk2MUpdateTagForm: ' + result);
    return;
  }
  /*
   * Now the function reads back the new value to double check.
   * This command returns all instantaneous tag values.
   */
  command = 'ParamForm?AST_Param=$dtIV$ftT';
  completeURL = encodeURI(host + command + credentials + ewonCredentials);
  params = {
    url: completeURL /* STRING */,
  };
  // returns a very long text that looks like this
  /*
    "TagId";"TagName";"Value";"AlStatus";"AlType";"Quality"
    2;"DEMOSTOP";0;0;0;65472
    3;"DEMOSCENARIO";2;0;0;65472
    4;"DEMOINUSE";1;0;0;65472
    5;"LiftStation-A01-FLOW";8770;0;0;65472
    6;"LiftStation-A01-PWR";1;0;0;65472
    7;"LiftStation-B01-FLOW";9160;0;0;65472
    8;"LiftStation-B01-PWR";1;0;0;65472
    */
  result = Resources['ContentLoaderFunctions'].GetText(params);
  var start = result.indexOf('"' + tagName + '"');
  /*
   * start takes us to the index of the tagName occurrence.
   * The offset of 3 accounts for the two " and the one ; before the tag value.
   * tagName.length takes the pointer to the end of the tagName.
   * start + 3 + tagName.length() will point to the first character of value.
   * tagValue.length() will then grab the entire tagValue.
   */
  newValue = result.substring(
    start + 3 + tagName.length,
    start + 3 + tagName.length + tagValue.length
  );
  if (tagValue == newValue) {
    logger.debug('The value of ' + tagName + ' changed to ' + tagValue + '.');
  } else {
    logger.error(
      'Failed to change the value of ' + tagName + ' to ' + tagValue + '.'
    );
    logger.debug('newValue: ' + tagValue + ', onWriteBack: ' + newValue);
  }
}
run();
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></ServiceImplementations><Subscriptions><Subscription description="" enabled="false" eventName="Timer" name="runConnector" source="" sourceProperty="" sourceType="Thing"><ServiceImplementation description="" handlerName="Script" name="runConnector"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[me.MainExecution();
//only comment the above and uncomment the below if the direct data path is being used
//me.ProcessTimeSinceUpdate({lastUpdate: false});]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></Subscription></Subscriptions></ThingShape><PropertyBindings/><RemotePropertyBindings/><RemoteServiceBindings/><RemoteEventBindings/><AlertConfigurations><AlertDefinitions name="alarmStreamToCopy"/><AlertDefinitions name="daysToKeep"/><AlertDefinitions name="generalMachineName"/><AlertDefinitions name="genericMachineToCopy"/><AlertDefinitions name="lastUpdateTime"/><AlertDefinitions name="scriptTimeoutSeconds"/><AlertDefinitions name="talk2MAccount"/><AlertDefinitions name="talk2MDeveloperID"/><AlertDefinitions name="talk2MPassword"/><AlertDefinitions name="talk2MToken"/><AlertDefinitions name="talk2MUsername"/><AlertDefinitions name="updateTimeoutMinutes"/><AlertDefinitions name="useHyphens"/></AlertConfigurations><ImplementedShapes/><ThingProperties><useHyphens><Value>true</Value><Timestamp>2020-08-25T16:08:14.997Z</Timestamp><Quality>GOOD</Quality></useHyphens><talk2MUsername><Value/><Timestamp>2020-08-26T18:38:59.674Z</Timestamp><Quality>GOOD</Quality></talk2MUsername><talk2MAccount><Value/><Timestamp>2020-08-26T18:39:14.582Z</Timestamp><Quality>GOOD</Quality></talk2MAccount><scriptTimeoutSeconds><Value>30</Value><Timestamp>1970-01-01T00:00:00.000Z</Timestamp><Quality>UNKNOWN</Quality></scriptTimeoutSeconds><alarmStreamToCopy><Value><![CDATA[AlarmStreamTemplate]]></Value><Timestamp>2020-07-30T14:38:21.364Z</Timestamp><Quality>GOOD</Quality></alarmStreamToCopy><talk2MToken><Value/><Timestamp>2020-08-26T18:39:04.070Z</Timestamp><Quality>GOOD</Quality></talk2MToken><daysToKeep><Value>14</Value><Timestamp>1970-01-01T00:00:00.000Z</Timestamp><Quality>UNKNOWN</Quality></daysToKeep><updateTimeoutMinutes><Value>2</Value><Timestamp>2020-08-11T15:27:37.800Z</Timestamp><Quality>GOOD</Quality></updateTimeoutMinutes><talk2MDeveloperID><Value/><Timestamp>2020-08-26T18:39:10.518Z</Timestamp><Quality>GOOD</Quality></talk2MDeveloperID><generalMachineName><Value><![CDATA[GeneralMachine]]></Value><Timestamp>1970-01-01T00:00:00.000Z</Timestamp><Quality>UNKNOWN</Quality></generalMachineName><talk2MPassword><Value/><Timestamp>2020-08-26T18:39:07.566Z</Timestamp><Quality>GOOD</Quality></talk2MPassword><genericMachineToCopy><Value><![CDATA[MachineTemplate]]></Value><Timestamp>1970-01-01T00:00:00.000Z</Timestamp><Quality>UNKNOWN</Quality></genericMachineToCopy><lastUpdateTime><Value>2020-08-26T18:38:00.877Z</Value><Timestamp>2020-08-26T18:38:00.877Z</Timestamp><Quality>GOOD</Quality></lastUpdateTime></ThingProperties><ConfigurationChanges><ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2020-08-19T17:39:55.942Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="subscriptions : runConnector : enabled updated&#10;" timestamp="2020-08-19T17:40:32.504Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="subscriptions : runConnector : enabled updated&#10;" timestamp="2020-08-19T19:25:38.350Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : MainExecution : service updated&#10;subscriptions : runConnector : enabled updated&#10;" timestamp="2020-08-19T19:46:12.066Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="" timestamp="2020-08-21T17:55:41.706Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="subscriptions : runConnector : enabled updated&#10;services : InsertStreamItem : service updated&#10;" timestamp="2020-08-21T20:30:38.396Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="properties : dataStreamToCopy : removed, genericMachineToCopy : added&#10;" timestamp="2020-08-24T14:13:20.468Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="properties : generalMachineName : added, generalMachineName : updated&#10;services : InsertStreamItem : service updated&#10;" timestamp="2020-08-24T14:17:05.528Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-24T14:17:49.789Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-24T14:18:21.822Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-24T14:59:02.102Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : input parameter tagQuality added, inputs updated&#10;" timestamp="2020-08-24T17:04:54.794Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-24T17:08:23.292Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : Talk2MSyncData : service updated&#10;" timestamp="2020-08-24T17:12:05.309Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-24T17:21:33.196Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-24T18:25:55.707Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-24T18:31:35.520Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-24T18:32:01.407Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-24T18:34:03.151Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-24T19:09:37.660Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-24T19:15:12.977Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="properties : dataTableToCopy : removed, generalDataTableName : removed, useHyphens : added, useHyphensDataTables : removed&#10;" timestamp="2020-08-24T19:17:18.175Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertDataTableItem : service updated&#10;" timestamp="2020-08-24T19:17:27.587Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertDataTableItem : service updated&#10;" timestamp="2020-08-24T19:17:36.222Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-24T19:18:16.944Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertDataTableItem : service updated&#10;" timestamp="2020-08-24T19:18:35.275Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertDataTableItem : service updated&#10;" timestamp="2020-08-24T19:19:10.613Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-24T19:21:34.826Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertDataTableItem : service updated&#10;" timestamp="2020-08-24T19:25:31.903Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertDataTableItem : service updated&#10;" timestamp="2020-08-24T19:29:01.068Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertDataTableItem : service updated&#10;" timestamp="2020-08-24T19:30:14.218Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="subscriptions : runConnector : enabled updated&#10;" timestamp="2020-08-25T16:08:20.653Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="subscriptions : runConnector : enabled updated&#10;" timestamp="2020-08-25T18:48:55.472Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertDataTableItem : service updated&#10;" timestamp="2020-08-25T20:22:59.004Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-25T20:40:38.726Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-25T20:46:54.591Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : PurgeDataStreams : service updated&#10;" timestamp="2020-08-25T20:50:28.651Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : CleanAllData : service updated&#10;" timestamp="2020-08-25T20:51:05.901Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : PurgeDataStreams : service updated&#10;" timestamp="2020-08-25T20:51:56.229Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : CleanAllData : service updated&#10;" timestamp="2020-08-25T20:55:16.364Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : CleanAllData : service updated&#10;" timestamp="2020-08-25T20:55:32.048Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : CleanAllData : service updated&#10;" timestamp="2020-08-25T21:25:00.485Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-25T21:26:18.511Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-26T15:57:32.416Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-26T15:58:41.180Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-26T16:02:36.968Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-26T16:08:27.716Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-26T16:13:12.006Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-26T16:13:51.678Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : CleanAllData : service updated&#10;" timestamp="2020-08-26T16:22:20.696Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-26T16:24:16.245Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="subscriptions : runConnector : enabled updated&#10;" timestamp="2020-08-26T17:13:31.773Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="subscriptions : runConnector : enabled updated&#10;" timestamp="2020-08-26T17:40:48.494Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : PurgeDataStreams : service updated&#10;InsertNonloggedItem : service added&#10;PurgeValueStreams : service added&#10;" timestamp="2020-08-26T18:17:07.967Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="" timestamp="2020-08-26T18:18:38.118Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : CleanAllData : service updated&#10;" timestamp="2020-08-26T18:21:08.430Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : CleanAllData : service updated&#10;" timestamp="2020-08-26T18:21:47.320Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertDataTableItem : service updated&#10;" timestamp="2020-08-26T18:24:37.667Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertStreamItem : service updated&#10;" timestamp="2020-08-26T18:28:11.032Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : PurgeDataStreams : service updated&#10;InsertNonloggedItem : service added&#10;" timestamp="2020-08-26T18:33:24.159Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : InsertNonloggedItem : service updated&#10;PurgeValueStreams : service added&#10;" timestamp="2020-08-26T18:33:48.936Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : PurgeValueStreams : service updated&#10;" timestamp="2020-08-26T18:35:17.466Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : Talk2MGetData : service updated&#10;" timestamp="2020-08-26T18:35:27.627Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="services : MainExecution : service updated&#10;InsertDataTableItem : service deleted&#10;PurgeDataStreams : service deleted&#10;" timestamp="2020-08-26T18:36:16.218Z" user="Administrator"/></ConfigurationChanges></Thing><Thing description="" documentationContent="" effectiveThingPackage="ValueStreamThing" enabled="true" homeMashup="StreamMashup" identifier="" inheritedValueStream="" lastModifiedDate="2020-08-26T18:18:38.118Z" name="FlexyConnectorValueStream" projectName="FlexyConnector" published="false" tags="" thingTemplate="ValueStream" valueStream=""><Owner name="Administrator" type="User"/><avatar/><DesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></DesignTimePermissions><RunTimePermissions/><VisibilityPermissions><Visibility/></VisibilityPermissions><ConfigurationTableDefinitions/><ConfigurationTables><ConfigurationTable dataShapeName="" description="Data Thing Configuration" isMultiRow="false" name="DataThingSettings" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="Persistence Provider Name" name="persistenceProvider" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><persistenceProvider><![CDATA[ThingworxPersistenceProvider]]></persistenceProvider></Row></Rows></ConfigurationTable><ConfigurationTable dataShapeName="" description="Configurable options to tune Value Stream performance" isMultiRow="false" name="PersistenceProviderCustomSettings" ordinal="2"><DataShape><FieldDefinitions><FieldDefinition aspect.friendlyName="Persistence Provider Custom Settings Table" baseType="INFOTABLE" description="Persistence Provider Custom Config Table" name="customConfigTable" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><customConfigTable><infoTable><DataShape><FieldDefinitions/></DataShape><Rows/></infoTable></customConfigTable></Row></Rows></ConfigurationTable></ConfigurationTables><ThingShape><PropertyDefinitions/><ServiceDefinitions/><EventDefinitions/><ServiceMappings/><ServiceImplementations/><Subscriptions/></ThingShape><PropertyBindings/><RemotePropertyBindings/><RemoteServiceBindings/><RemoteEventBindings/><AlertConfigurations/><ImplementedShapes/><ThingProperties/><ConfigurationChanges><ConfigurationChange changeAction="CREATE" changeReason="header : name : updated, projectName : updated&#10;" timestamp="2020-08-21T18:04:20.648Z" user="Administrator"/><ConfigurationChange changeAction="MODIFY" changeReason="" timestamp="2020-08-26T18:18:38.118Z" user="Administrator"/></ConfigurationChanges></Thing></Things><Logs/><Authenticators/><ThingPackages/><NotificationDefinitions/><ApplicationKeys/><StateDefinitions/><ThingTemplates/><ExtensionPackages/><Organizations/><Menus/><ThingGroups/><Resources/><DataTags/><ThingShapes/><Subsystems/><NotificationContents/></Entities>